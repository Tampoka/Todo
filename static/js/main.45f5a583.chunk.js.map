{"version":3,"sources":["components/ErrorSnackBar/ErrorSnackBar.module.css","api/todolist-api.ts","reportWebVitals.ts","common/color-sheme.ts","utils/error-utils.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/todolists-reducer.ts","redux/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","features/Login/Login.tsx","app/App.tsx","redux/store.ts","index.tsx"],"names":["module","exports","TaskStatuses","TaskPriorities","ResultCodes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","themeOptions","createTheme","palette","primary","main","secondary","light","background","default","paper","error","instance","axios","create","baseURL","withCredentials","headers","todolistApi","get","title","post","todolistId","put","delete","taskId","model","authApi","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkAError","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","changeTodolistEntityStatusAC","fetchTasksTC","res","handleFetchServerAppError","tasks","setTasksAC","items","catch","updateTaskTC","domainModel","getState","task","find","t","id","apiModel","description","priority","startDate","deadline","resultCode","success","action","updateTaskAC","console","warn","AddItemForm","React","memo","addItem","disabled","useState","newTaskTitle","setNewTaskTitle","setError","addItemHandler","trim","TextField","variant","label","onChange","e","currentTarget","onKeyPress","key","size","IconButton","onClick","color","AddBox","EditableSpan","editMode","setEditMode","newTitle","setNewTitle","onBlur","autoFocus","onDoubleClick","Task","removeTask","changeTaskStatus","changeTaskTitle","onChangeTitleHandler","useCallback","newValue","className","Completed","aria-label","Delete","Checkbox","checked","New","Todolist","props","todolist","removeTodolist","changeFilter","addTask","changeTodolistTitle","demo","useDispatch","useEffect","log","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","onRemoveTodolistHandler","onchangeTodolistTitleHandler","onAddTask","tasksForTodolist","filter","entityStatus","List","sx","bgcolor","map","ListItem","style","padding","Button","undefined","TodolistsList","todolists","useSelector","state","auth","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","changeTodolistTitleAC","changeTodolistTitleTC","changeTodolistFilterAC","removeTodolistAC","addTodolist","addTodolistTC","Grid","container","spacing","justifyContent","tl","Paper","elevation","to","Alert","ref","ErrorSnackBar","app","vertical","horizontal","isOpen","handleClose","event","reason","s","barContainer","Snackbar","open","autoHideDuration","onClose","anchorOrigin","severity","width","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","errors","FormControlLabel","control","name","App","logoutHandler","ThemeProvider","theme","Box","flexGrow","AppBar","position","Toolbar","edge","mr","Menu","Typography","component","LinearProgress","Container","fixed","path","element","CircularProgress","top","left","marginTop","marginLeft","rootReducer","combineReducers","todoListId","copyState","forEach","middlewareEnhancer","applyMiddleware","thunkMiddleware","composeEnhancers","composeWithDevTools","store","createStore","window","ReactDOM","render","document","getElementById"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,aAAe,sC,wFCmErBC,EAMAC,EAOAC,E,iCCnEGC,G,OAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,oCCaCQ,EApBMC,YAAY,CAC7BC,QAAS,CAELC,QAAS,CACLC,KAAM,WAEVC,UAAW,CACPD,KAAM,UACNE,MAAO,yBAEXC,WAAY,CACRC,QAAS,UACTC,MAAO,0BAEXC,MAAO,CACHN,KAAM,c,yCFfZO,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAKNC,EAAc,WAEnB,OAAON,EAASO,IAAyB,eAFpCD,EAAc,SAIZE,GAEP,OAAOR,EAASS,KACf,aAAc,CAACD,WAPXF,EAAc,SASPI,EAAoBF,GAChC,OAAOR,EAASW,IAAT,qBAAqGD,GAAc,CAACF,MAAOA,KAV7HF,EAAc,SAYZI,GACP,OAAOV,EAASY,OAAT,qBAAkDF,KAbpDJ,EAAc,SAedI,GACL,OAAOV,EAASO,IAAT,qBAAiDG,EAAjD,YAhBFJ,EAAc,SAkBZI,EAAoBF,GAC3B,OAAOR,EAASS,KAAT,qBACQC,EADR,UAC4B,CAACF,WApB/BF,EAAc,SAsBZI,EAAoBG,EAAgBC,GAC3C,OAAOd,EAASW,IAAT,qBACQD,EADR,kBAC4BG,GAAUC,IAxBxCR,EAAc,SA0BZI,EAAoBG,GAC3B,OAAOb,EAASY,OAAT,qBAAkDF,EAAlD,kBAAsEG,KAKxEE,EAAU,SACbC,GACF,OAAOhB,EAASS,KAA8E,aAAcO,IAFvGD,EAAU,WAKf,OAAOf,EAASO,IAAoC,YAL/CQ,EAAU,WAQf,OAAOf,EAASY,OAA2B,gB,SAiBvCnC,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAMAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,cAOAC,O,qBAAAA,I,mBAAAA,I,uBAAAA,M,KG7EL,IAAMsC,EAAuB,SAAID,EAA6BE,GAC7DF,EAAKG,SAASC,OACdF,EAASG,EAAcL,EAAKG,SAAS,KAErCD,EAASG,EAAc,yBAE3BH,EAASI,EAAe,YAGfC,EAA4B,SAACxB,EAA0BmB,GAChEA,EAASG,EAActB,EAAMyB,QAAQzB,EAAMyB,QAAQ,wBACnDN,EAASI,EAAe,YCVtBG,EAAiC,CACnCC,YAAY,GAaHC,EAAkB,SAACC,GAAD,MAAqB,CAChDC,KAAM,yBAA0BD,UChB9BH,EAAe,CACjBK,OAAQ,OACR/B,MAAO,KAEPgC,eAAe,GAiBNV,EAAgB,SAACtB,GAAD,MAA2B,CAAC8B,KAAM,gBAAiB9B,UACnEuB,EAAiB,SAACQ,GAAD,MAAgC,CAACD,KAAM,iBAAkBC,WCrBjFL,EAA0C,GA2CnCO,EAA+B,SAACtB,EAAoBoB,GAArB,MAAoD,CAC5FD,KAAM,gCACNnB,aAAYoB,W,OC7BVL,EAA+B,GAkDxBQ,EAAe,SAACvB,GAAD,OAAwB,SAACQ,GACjDA,EAASI,EAAe,YACxBJ,EAASc,EAA6BtB,EAAW,YACjDJ,EAAqBI,GAChB3B,MAAK,SAAAmD,GACEA,EAAIlB,KAAKjB,MJ1Dc,SAACiB,EAA0BE,GAC1DF,EAAKjB,MACLmB,EAASG,EAAcL,EAAKjB,QAE5BmB,EAASG,EAAc,yBAE3BH,EAASI,EAAe,WIyDZa,CAA0BD,EAAIlB,KAAKE,IAJnCA,EAXU,SAACkB,EAAwB1B,GAAzB,MAAiD,CACvEmB,KAAM,YAAaO,QAAO1B,cAUL2B,CAAWH,EAAIlB,KAAKsB,MAAO5B,IACpCQ,EAASI,EAAe,cACxBJ,EAASc,EAA6BtB,EAAW,kBAKxD6B,OAAM,SAACxC,GACJwB,EAA0BxB,EAAMmB,QAqC/BsB,EAAe,SAAC3B,EAAgB4B,EAAwC/B,GAAzD,OACxB,SAACQ,EAAyBwB,GACtB,IACMC,EADQD,IACKN,MAAM1B,GAAYkC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAOjC,KAExD,GAAK8B,EAAL,CAMA,IAAMI,EAA6B,aAC/BvC,MAAOmC,EAAKnC,MACZwC,YAAaL,EAAKK,YAClBlB,OAAQa,EAAKb,OACbmB,SAAUN,EAAKM,SACfC,UAAWP,EAAKO,UAChBC,SAAUR,EAAKQ,UACZV,GAEPvB,EAASc,EAA6BtB,EAAW,YACjDJ,EAAuBI,EAAYG,EAAQkC,GACtChE,MAAK,SAAAmD,GACF,GAAGA,EAAIlB,KAAKoC,aAAazE,EAAY0E,QAAQ,CACzC,IAAMC,EAnFE,SAACR,EAAYhC,EAAkCJ,GAA/C,MAAuE,CAC/FmB,KAAM,cAAenB,aAAYoC,KAAIhC,SAkFNyC,CAAa1C,EAAQ4B,EAAa/B,GACjDQ,EAASoC,GACTpC,EAASc,EAA6BtB,EAAW,mBAEjDO,EAAqBiB,EAAIlB,KAAKE,MAGrCqB,OAAM,SAACxC,GACJwB,EAA0BxB,EAAMmB,WAzBpCsC,QAAQC,KAAK,iC,4DCxHZC,EAAcC,IAAMC,MAAK,YAA2D,IAAhDC,EAA+C,EAA/CA,QAA+C,IAAvCC,gBAAuC,WAChDC,mBAAS,IADuC,mBACjFC,EADiF,KACnEC,EADmE,OAE9DF,oBAAkB,GAF4C,mBAEjFhE,EAFiF,KAE1EmE,EAF0E,KAclFC,EAAiB,WACS,KAAxBH,EAAaI,QACO,eAAjBJ,GACHH,EAAQG,GACRC,EAAgB,KAEhBC,GAAS,IAIjB,OAAO,gCACH,cAACG,EAAA,EAAD,CAAWzC,MAAOoC,EACPF,SAAUA,EACVQ,QAAS,WACTC,MAAOxE,EAAQ,oBAAsB,cACrCyE,SAzBiB,SAACC,GAC7B1E,GAASmE,GAAS,GAClBD,EAAiBQ,EAAEC,cAAc9C,QAwBtB+C,WAtBW,SAACF,GACvB1E,GAASmE,GAAS,GACJ,UAAVO,EAAEG,KACFT,KAoBOpE,MAAOA,EACP8E,KAAK,UAChB,cAACC,EAAA,EAAD,CAAYC,QAASZ,EAAgBa,MAAO,UAAWlB,SAAUA,EAAjE,SACI,cAACmB,EAAA,EAAD,YClCHC,EAAevB,IAAMC,MAAK,YAA+D,IAApDpD,EAAmD,EAAnDA,MAAOgE,EAA4C,EAA5CA,SAAUV,EAAkC,EAAlCA,SAAkC,EACnEC,oBAAS,GAD0D,mBAC5FoB,EAD4F,KAClFC,EADkF,OAEnErB,mBAAS,IAF0D,mBAE5FsB,EAF4F,KAElFC,EAFkF,KAyBjG,OAAOH,EACD,cAACd,EAAA,EAAD,CAAWzC,MAAOyD,EACPE,OAjBQ,WACrBH,GAAY,GACZZ,EAASa,IAgBIV,WAbS,SAACF,GACT,UAAVA,EAAEG,MACFQ,GAAY,GACZZ,EAASa,KAWAb,SAPY,SAACC,GAC1Ba,EAAYb,EAAEC,cAAc9C,QAOf4D,WAAS,EACTX,KAAK,QACLP,QAAQ,aACnB,sBAAMmB,cA7Ba,WACjB3B,IACJsB,GAAY,GACZE,EAAY9E,KA0BV,SAAwCA,O,oBC3BrCkF,GAAO/B,IAAMC,MAAK,YAQ6B,IAPflD,EAOc,EAPdA,WACAiC,EAMc,EANdA,KACAgD,EAKc,EALdA,WACAC,EAIc,EAJdA,iBACAC,EAGc,EAHdA,gBACA/B,EAEc,EAFdA,SASnCgC,GAPiD,kGAO1BC,uBAAY,SAACC,GACtCH,EAAgBlD,EAAKG,GAAIkD,EAAUtF,KACpC,CAACmF,EAAiBlD,EAAKG,GAAIpC,KAE9B,OACI,sBAAmBuF,UAAWtD,EAAKb,SAAWrD,EAAayH,UAAY,UAAY,GAAnF,UACI,cAACpB,EAAA,EAAD,CAAYC,QAXI,kBAAMY,EAAWhD,EAAKG,GAAIpC,IAWJyF,aAAW,SAASnB,MAAM,QAAQlB,SAAUA,EAAlF,SACI,cAACsC,GAAA,EAAD,MAEJ,cAACC,GAAA,EAAD,CAAUC,QAAS3D,EAAKb,SAAWrD,EAAayH,UACtC1B,SAdY,SAACC,GAC3BmB,EAAiBjD,EAAKG,GAClB2B,EAAEC,cAAc4B,QAAU7H,EAAayH,UAAYzH,EAAa8H,IAAK7F,IAa3DsE,MAAM,UAAUlB,SAAUA,IACpC,cAACoB,EAAD,CAAc1E,MAAOmC,EAAKnC,MAAOgE,SAAUsB,EAAsBhC,SAAUA,MAPrEnB,EAAKG,O,8BCVV0D,GAAW7C,IAAMC,MAAK,SAAU6C,GAA2B,IAEhEC,EAEAD,EAFAC,SAAStE,EAETqE,EAFSrE,MAAOuD,EAEhBc,EAFgBd,WAAYgB,EAE5BF,EAF4BE,eAAgBC,EAE5CH,EAF4CG,aAAcC,EAE1DJ,EAF0DI,QAASjB,EAEnEa,EAFmEb,iBACnEC,EACAY,EADAZ,gBAAiBiB,EACjBL,EADiBK,oBAH8C,EAI/DL,EADsCM,YAHyB,SAO7D7F,EAAW8F,cAEjBC,qBAAU,WACFF,GACJ7F,EAASe,EAAayE,EAAS5D,OAChC,CAAC5B,EAAUwF,EAAS5D,GAAIiE,IAE3BvD,QAAQ0D,IAAI,yBACZ,IAAMC,EAAoBpB,uBAAY,kBAAMa,EAAa,MAAOF,EAAS5D,MAAK,CAAC8D,EAAcF,EAAS5D,KAChGsE,EAAuBrB,uBAAY,kBAAMa,EAAa,SAAUF,EAAS5D,MAAK,CAAC8D,EAAcF,EAAS5D,KACtGuE,EAA0BtB,uBAAY,kBAAMa,EAAa,YAAaF,EAAS5D,MAAK,CAAC8D,EAAcF,EAAS5D,KAC5GwE,EAA0BvB,uBAAY,kBAAMY,EAAeD,EAAS5D,MAAK,CAAC6D,EAAgBD,EAAS5D,KACnGyE,EAA+BxB,uBAAY,SAACC,GAAD,OAAsBc,EAAoBd,EAAUU,EAAS5D,MAAK,CAACgE,EAAqBJ,EAAS5D,KAC5I0E,EAAYzB,uBAAY,SAACvF,GAAD,OAAmBqG,EAAQrG,EAAOkG,EAAS5D,MAAK,CAAC+D,EAASH,EAAS5D,KAE7F2E,EAAmBrF,EASvB,MAPwB,WAApBsE,EAASgB,SACTD,EAAmBrF,EAAMsF,QAAO,SAAA7E,GAAC,OAAIA,EAAEf,SAAWrD,EAAa8H,QAE3C,cAApBG,EAASgB,SACTD,EAAmBrF,EAAMsF,QAAO,SAAA7E,GAAC,OAAIA,EAAEf,SAAWrD,EAAayH,cAG5D,gCACH,+BAAI,cAACpB,EAAA,EAAD,CAAYC,QAASuC,EAAyBnB,aAAW,SAASnB,MAAM,QAC5ElB,SAAkC,YAAxB4C,EAASiB,aADf,SAEA,cAACvB,GAAA,EAAD,MAEA,cAAClB,EAAD,CAAcV,SAAU+C,EAA8B/G,MAAOkG,EAASlG,MACtEsD,SAAkC,YAAxB4C,EAASiB,kBAEvB,cAACjE,EAAD,CAAaG,QAAS2D,EAAW1D,SAAkC,YAAxB4C,EAASiB,eACpD,8BACI,cAACC,GAAA,EAAD,CAAMC,GAAI,CAACC,QAAS,oBAApB,SACKL,EAAiBM,KAAI,SAAAlF,GAAC,OACnB,cAACmF,GAAA,EAAD,UACI,cAACtC,GAAD,CACIhF,WAAYgG,EAAS5D,GACrBgB,SAAkC,YAAxB4C,EAASiB,aACnBhF,KAAME,EACN8C,WAAYA,EACZC,iBAAkBA,EAClBC,gBAAiBA,KAPVhD,EAAEC,WAW7B,sBAAKmF,MAAO,CAACC,QAAS,QAAtB,UACI,cAACC,GAAA,EAAD,CAAQ7D,QAA6B,QAApBoC,EAASgB,OAAmB,iBAAcU,EAAWrD,QAASoC,EACvEnC,MAAM,UAAUlB,SAAkC,YAAxB4C,EAASiB,aAD3C,iBAEA,cAACQ,GAAA,EAAD,CAAQnD,MAAM,UAAUV,QAA6B,WAApBoC,EAASgB,OAAsB,iBAAcU,EACtErD,QAASqC,EAAsBtD,SAAkC,YAAxB4C,EAASiB,aAD1D,oBAGA,cAACQ,GAAA,EAAD,CAAQnD,MAAM,YAAYV,QAA6B,cAApBoC,EAASgB,OAAyB,iBAAcU,EAC3ErD,QAASsC,EAAyBvD,SAAkC,YAAxB4C,EAASiB,aAD7D,gC,SC/DCU,GAAqC,SAAC,GAA8B,IAAD,IAA5BtB,YAA4B,SAEtEuB,GAFsE,wBAE1DC,aAAyD,SAAAC,GAAK,OAAIA,EAAMF,cACpFlG,EAAQmG,aAA8C,SAAAC,GAAK,OAAIA,EAAMpG,SACrEV,EAAa6G,aAAuC,SAAAC,GAAK,OAAIA,EAAMC,KAAK/G,cACxER,EAAW8F,cAEjBC,qBAAU,YACFF,GAASrF,GACbR,GNwBJ,SAACA,GACGA,EAASI,EAAe,YACxBhB,IACKvB,MAAK,SAAAmD,GACFhB,EAfmD,CAC/DW,KAAM,gBACNyG,UAaoCpG,EAAIlB,OAC5BE,EAASI,EAAe,iBAE3BiB,OAAM,SAAAxC,GACHwB,EAA0BxB,EAAMmB,WM/BzC,CAACA,EAAU6F,EAAMrF,IAEpB,IAAMiE,EAAaI,uBAAY,SAACjD,EAAYpC,GACxCQ,ELqDoB,SAACL,EAAgBH,GAAjB,OAAwC,SAACQ,GACjEA,EAASc,EAA6BtB,EAAW,YACjDJ,EAAuBI,EAAYG,GAC9B9B,MAAK,SAAAmD,GACCA,EAAIlB,KAAKoC,aAAazE,EAAY0E,SACjCnC,EApCY,SAACL,EAAgBH,GAAjB,MAAyC,CACjEmB,KAAM,cAAehB,SAAQH,cAmCRgI,CAAa7H,EAAQH,IAC9BQ,EAASc,EAA6BtB,EAAW,eAEjDO,EAAqBiB,EAAIlB,KAAKE,MAGrCqB,OAAM,SAACxC,GACJwB,EAA0BxB,EAAMmB,OKjE3ByH,CAAa7F,EAAIpC,MAC3B,CAACQ,IACE2F,EAAUd,uBAAY,SAACvF,EAAeE,GACxCQ,ELiEiB,SAACV,EAAeE,GAAhB,OAAuC,SAACQ,GAC7DA,EAASI,EAAe,YACxBJ,EAASc,EAA6BtB,EAAW,YACjDJ,EAAuBI,EAAYF,GAC9BzB,MAAK,SAAAmD,GACF,GAAIA,EAAIlB,KAAKoC,aAAezE,EAAY0E,QAAS,CAC7C,IAAMC,EAjDwB,CAC1CzB,KAAM,WAAYc,KAgDmBT,EAAIlB,KAAKA,KAAK4H,MACvC1H,EAASoC,GACTpC,EAASI,EAAe,cACxBJ,EAASc,EAA6BtB,EAAW,mBAEjDO,EAAqBiB,EAAIlB,KAAKE,MAGrCqB,OAAM,SAACxC,GACLwB,EAA0BxB,EAAMmB,OKhF1B2H,CAAUrI,EAAOE,MAC3B,CAACQ,IACE4H,EAAe/C,uBAAY,SAAClF,EAAgBiB,EAAsBpB,GACpEQ,EAASsB,EAAa3B,EAAQ,CAACiB,UAASpB,MACzC,CAACQ,IACE2E,EAAkBE,uBAAY,SAAClF,EAAgBwE,EAAkB3E,GACnEQ,EAASsB,EAAa3B,EAAQ,CAACL,MAAO6E,GAAW3E,MAClD,CAACQ,IACE4F,EAAsBf,uBAAY,SAACV,EAAkB3E,GACvDQ,ENuC6B,SAACV,EAAeE,GAAhB,OACjC,SAACQ,GACGA,EAASI,EAAe,YACxBJ,EAASc,EAA6BtB,EAAY,YAClDJ,EAA4BI,EAAYF,GACnCzB,MAAK,SAAAmD,GACFhB,EA1DqB,SAACV,EAAeE,GAAhB,MAAwC,CACzEmB,KAAM,wBACNnB,aACAF,SAuDqBuI,CAAsBvI,EAAOE,IACtCQ,EAASI,EAAe,cACxBJ,EAASc,EAA6BtB,EAAY,kBM/CjDsI,CAAsB3D,EAAU3E,MAC1C,CAACQ,IACE0F,EAAeb,uBAAY,SAACnE,EAAyBlB,GACvD,IAAM4C,ENXwB,SAACoE,EAA0BhH,GAA3B,MAAmD,CACrFmB,KAAM,yBACNnB,aACAgH,UMQmBuB,CAAuBrH,EAAOlB,GAC7CQ,EAASoC,KACV,CAACpC,IACEyF,EAAiBZ,uBAAY,SAACjD,GNaR,IAACpC,EMZzBQ,GNYyBR,EMZCoC,ENa9B,SAAC5B,GACGA,EAASI,EAAe,YACxBJ,EAASc,EAA6BtB,EAAY,YAClDJ,EAAuBI,GAClB3B,MAAK,SAAAmD,GACFhB,EA9CgB,SAACR,GAAD,MAAyB,CACrDmB,KAAM,kBACNnB,cA4CqBwI,CAAiBxI,IAC1BQ,EAASI,EAAe,sBMlBjC,CAACJ,IACEiI,EAAcpD,uBAAY,SAACvF,GAC7BU,ENoBqB,SAACV,GAAD,OAAmB,SAACU,GAC7CA,EAASI,EAAe,YACxBhB,EAAuBE,GAClBzB,MAAK,SAAAmD,GACFhB,EAnD8C,CACtDW,KAAM,eACN6E,SAiD+BxE,EAAIlB,KAAKA,KAAK4H,OACrC1H,EAASI,EAAe,kBMzBnB8H,CAAc5I,MACxB,CAACU,IAEJ,OAAKQ,EAIE,qCACH,cAAC2H,EAAA,EAAD,CAAMC,WAAS,EAACrB,MAAO,CAACC,QAAS,QAAjC,SACI,cAACxE,EAAD,CAAaG,QAASsF,MAE1B,cAACE,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GAAIC,eAAe,SAA5C,SAEQlB,EAAUP,KAAI,SAAA0B,GACV,OAAO,cAACJ,EAAA,EAAD,CAAMT,MAAI,EAAV,SACH,cAACc,EAAA,EAAD,CAAOC,UAAW,GAAI1B,MAAO,CAACC,QAAS,QAAvC,SACI,cAAC1B,GAAD,CACIE,SAAU+C,EACVrH,MAAOA,EAAMqH,EAAG3G,IAChB6C,WAAYA,EACZgB,eAAgBA,EAChBC,aAAcA,EACdC,QAASA,EACTjB,iBAAkBkD,EAClBjD,gBAAiBA,EACjBiB,oBAAqBA,EACrBC,KAAMA,OAZK0C,EAAG3G,YAV/B,cAAC,KAAD,CAAU8G,GAAG,Y,yCCpDtBC,GAAQlG,cAA6C,SACvD8C,EACAqD,GAEA,OAAO,cAAC,KAAD,aAAUH,UAAW,EAAGG,IAAKA,EAAKxF,QAAQ,UAAamC,OAG3D,SAASsD,KACZ,IAAMhK,EAAQwI,aAA6C,SAAAC,GAAK,OAAIA,EAAMwB,IAAIjK,SACxEmB,EAAW8F,cAFW,EAIFjD,mBAAyB,CAC/CkG,SAAU,SACVC,WAAY,WANY,mBAIrB1B,EAJqB,KAQrByB,GARqB,KAQGzB,EAAxByB,UAAUC,EAAc1B,EAAd0B,WAEXC,EAAmB,OAAVpK,EACTqK,EAAc,SAACC,EAAsCC,GACxC,cAAXA,GAGJpJ,EAASG,EAAc,QAI3B,OACI,qBAAK4E,UAAWsE,KAAEC,aAAlB,SACI,cAACC,GAAA,EAAD,CAAUC,KAAMP,EAAQQ,iBAAkB,IAAMC,QAASR,EAAaS,aAAc,CAACZ,WAAUC,cAA/F,SACA,cAAC,GAAD,CAAOU,QAASR,EAAaU,SAAS,QAAQjD,GAAI,CAACkD,MAAO,QAA1D,SACKhL,Q,+DCkCFiL,GAjEM,WACjB,IAAM9J,EAAW8F,cACXtF,EAAa6G,aAAuC,SAAAC,GAAK,OAAIA,EAAMC,KAAK/G,cAExEuJ,EAASC,aAAU,CACrBC,SAAU,SAACC,GACP,OAAKA,EAAOC,MAKPD,EAAOE,cAAZ,EACW,CACHA,SAAU,wBANP,CACHD,MAAO,sBASnBE,cAAe,CACXF,MAAO,GACPC,SAAU,GACVE,YAAY,GAEhBC,SAAU,SAAAL,GVLK,IAACpK,EUMZE,GVNYF,EUMKoK,EVNqB,SAAClK,GAC/CA,EAASI,EAAe,YACxBP,EAAcC,GACTjC,MAAK,SAAAmD,GACEA,EAAIlB,KAAKoC,aAAezE,EAAY0E,SACpCnC,EAASS,GAAgB,IACzBT,EAASI,EAAe,eAExBL,EAAqBiB,EAAIlB,KAAME,MAGtCqB,OAAM,SAACxC,GACJwB,EAA0BxB,EAAOmB,YUHzC,OAAIQ,EACO,cAAC,KAAD,CAAUkI,GAAG,MAEjB,cAACP,EAAA,EAAD,CAAMC,WAAS,EAACE,eAAgB,SAAhC,SACH,cAACH,EAAA,EAAD,CAAMT,MAAI,EAACY,eAAgB,SAA3B,SACI,sBAAMiC,SAAUR,EAAOS,aAAvB,SACI,eAACC,GAAA,EAAD,WACI,eAACC,GAAA,EAAD,WACI,yDACI,mBAAGC,KAAM,wCACNC,OAAQ,SACRC,IAAI,+BAFP,sBAKJ,wEACA,0DACA,kDAEJ,eAACC,GAAA,EAAD,WACI,cAAC3H,EAAA,EAAD,aAAWE,MAAM,QAAQ0H,OAAO,UAAahB,EAAOiB,cAAc,WACjEjB,EAAOkB,OAAOd,MAAQ,8BAAMJ,EAAOkB,OAAOd,QAAe,KAC1D,cAAChH,EAAA,EAAD,aAAWxC,KAAK,WAAW0C,MAAM,WACtB0H,OAAO,UAAahB,EAAOiB,cAAc,cACnDjB,EAAOkB,OAAOb,SAAW,8BAAML,EAAOkB,OAAOb,WAAkB,KAChE,cAACc,GAAA,EAAD,yBAAkB7H,MAAO,cACP8H,QAAS,cAAChG,GAAA,EAAD,CACLiG,KAAK,gBAAoBrB,EAAOiB,cAAc,eAFpE,IAGkB5F,QAAS2E,EAAOG,OAAOI,cACzC,cAACrD,GAAA,EAAD,CAAQtG,KAAM,SAAUyC,QAAS,YAAaU,MAAO,UAArD,gC,sEC0BTuH,OA7Df,YAAyC,IAAD,IAA1BxF,YAA0B,SAC9BjF,EAASyG,aAAiD,SAAAC,GAAK,OAAIA,EAAMwB,IAAIlI,UAC7EC,EAAgBwG,aAAuC,SAAAC,GAAK,OAAIA,EAAMwB,IAAIjI,iBAC1EL,EAAa6G,aAAuC,SAAAC,GAAK,OAAIA,EAAMC,KAAK/G,cACxER,EAAW8F,cAEXwF,EAAgBzG,uBAAY,WAC9B7E,GXOsB,SAACA,GAC3BA,EAASI,EAAe,YACxBP,IACKhC,MAAK,SAAAmD,GACEA,EAAIlB,KAAKoC,aAAezE,EAAY0E,SACpCnC,EAASS,GAAgB,IACzBT,EAASI,EAAe,eAExBL,EAAqBiB,EAAIlB,KAAME,MAGtCqB,OAAM,SAACxC,GACJwB,EAA0BxB,EAAOmB,WWlBtC,CAACA,IAMJ,OAJA+F,qBAAU,WACN/F,GVR6B,SAACA,GAClCH,IACKhC,MAAK,SAAAmD,GACEA,EAAIlB,KAAKoC,aAAezE,EAAY0E,SACpCnC,EAASS,GAAgB,IAI7BT,EAX4C,CAACW,KAAM,yBAA0BD,OAWhD,YUClC,CAACV,IAECa,EAcD,cAAC,KAAD,UACI,cAAC0K,GAAA,EAAD,CAAeC,MAAOrN,EAAtB,SACI,sBAAK4G,UAAU,MAAf,UACI,eAAC0G,EAAA,EAAD,CAAK9E,GAAI,CAAC+E,SAAU,GAApB,UAEI,eAACC,GAAA,EAAD,CAAQC,SAAU,SAAlB,UACI,eAACC,GAAA,EAAD,WACI,cAACjI,EAAA,EAAD,CAAYkI,KAAM,QAAShI,MAAO,UAAWmB,aAAW,OAAOtB,KAAK,QACxDgD,GAAI,CAACoF,GAAI,GADrB,SAEI,cAACC,EAAA,EAAD,MAEJ,cAACC,GAAA,EAAD,CAAY7I,QAAQ,KAAK8I,UAAU,MAAMvF,GAAI,CAAC+E,SAAU,GAAxD,kBAGClL,GAAc,cAACyG,GAAA,EAAD,CAAQnD,MAAO,UAAWD,QAASyH,EAAnC,wBAEP,YAAX1K,GAAwB,cAACuL,GAAA,EAAD,CAAgBrI,MAAM,iBAEnD,cAAC+E,GAAD,OAEJ,cAACuD,GAAA,EAAD,CAAWC,OAAK,EAAhB,SACI,eAAC,KAAD,WACI,cAAC,KAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,GAAD,CAAe1G,KAAMA,MAC9C,cAAC,KAAD,CAAOyG,KAAK,SAASC,QAAS,cAAC,GAAD,kBApC3C,cAACC,GAAA,EAAD,CAAkB7I,KAAM,GACNgD,GAAI,CACA7C,MAAO,UACP8H,SAAU,WACVa,IAAK,MACLC,KAAM,MACNC,UAAW,QACXC,WAAY,Y,6BCxC3CC,GAAcC,2BAAgB,CAChC5L,MTauB,WAAgF,IAA/EoG,EAA8E,uDAAtD/G,EAAc6B,EAAwC,uCACtG,OAAQA,EAAOzB,MACX,IAAK,cACD,OAAO,2BAAI2G,GAAX,kBAAmBlF,EAAO5C,WAAa8H,EAAMlF,EAAO5C,YAAYgH,QAAO,SAAA7E,GAAC,OAAIA,EAAEC,KAAOQ,EAAOzC,YAChG,IAAK,WACD,OAAO,2BAAI2H,GAAX,kBAAmBlF,EAAOX,KAAKsL,WAA/B,CAA6C3K,EAAOX,MAApD,mBAA6D6F,EAAMlF,EAAOX,KAAKsL,gBACnF,IAAK,cACD,OAAO,2BACAzF,GADP,kBACelF,EAAO5C,WAAa8H,EAAMlF,EAAO5C,YACvCqH,KAAI,SAAAlF,GAAC,OAAIA,EAAEC,KAAOQ,EAAOR,GAAhB,2BAAyBD,GAAMS,EAAOxC,OAAS+B,OAErE,IAAK,eACD,OAAO,2BACA2F,GADP,kBACelF,EAAOoD,SAAS5D,GAAK,KAExC,IAAK,kBACD,IAAMoL,EAAS,eAAO1F,GAEtB,cADO0F,EAAU5K,EAAO5C,YACjBwN,EACX,IAAK,gBACD,IAAMA,EAAS,eAAO1F,GAItB,OAHAlF,EAAOgF,UAAU6F,SAAQ,SAAA1E,GACrByE,EAAUzE,EAAG3G,IAAM,MAEhBoL,EAEX,IAAK,YACD,OAAO,2BAAI1F,GAAX,kBAAmBlF,EAAO5C,WAAa4C,EAAOlB,QAClD,QACI,OAAOoG,ISzCfF,UVJ4B,WAAsG,IAArGE,EAAoG,uDAAjE/G,EAAc6B,EAAmD,uCACjI,OAAQA,EAAOzB,MACX,IAAK,kBACD,OAAO2G,EAAMd,QAAO,SAAA+B,GAAE,OAAIA,EAAG3G,KAAOQ,EAAO5C,cAC/C,IAAK,eACD,MAAM,CAAN,2BAAY4C,EAAOoD,UAAnB,IAA6BgB,OAAQ,MAAOC,aAAc,UAA1D,mBAAsEa,IAC1E,IAAK,wBACD,OAAOA,EAAMT,KAAI,SAAA0B,GAAE,OAAIA,EAAG3G,KAAOQ,EAAO5C,WAAjB,2BAAkC+I,GAAlC,IAAsCjJ,MAAO8C,EAAO9C,QAASiJ,KACxF,IAAK,yBACD,OAAOjB,EAAMT,KAAI,SAAA0B,GAAE,OAAIA,EAAG3G,KAAOQ,EAAO5C,WAAjB,2BAAkC+I,GAAlC,IAAsC/B,OAAQpE,EAAOoE,SAAU+B,KAC1F,IAAK,gCACD,OAAOjB,EAAMT,KAAI,SAAA0B,GAAE,OAAIA,EAAG3G,KAAOQ,EAAO5C,WAAjB,2BAAkC+I,GAAlC,IAAsC9B,aAAcrE,EAAOxB,SAAU2H,KAChG,IAAK,gBACD,OAAOnG,EAAOgF,UAAUP,KAAI,SAAA0B,GAAE,kCAASA,GAAT,IAAa/B,OAAQ,MAAOC,aAAc,YAC5E,QACI,OAAOa,IUVfwB,IXDsB,WAAoF,IAAnFxB,EAAkF,uDAAxD/G,EAAc6B,EAA0C,uCACzG,OAAQA,EAAOzB,MACX,IAAK,iBACD,OAAO,2BAAI2G,GAAX,IAAkB1G,OAAQwB,EAAOxB,SACrC,IAAK,gBACD,OAAO,2BAAI0G,GAAX,IAAkBzI,MAAOuD,EAAOvD,QACpC,IAAK,yBACD,OAAO,2BAAIyI,GAAX,IAAkBzG,cAAeuB,EAAO1B,QAC5C,QACI,OAAO,eAAI4G,KWPnBC,KZJuB,WAAoF,IAAnFD,EAAkF,uDAAxD/G,EAAc6B,EAA0C,uCAC1G,OAAQA,EAAOzB,MACX,IAAK,yBACD,OAAO,2BAAI2G,GAAX,IAAkB9G,WAAY4B,EAAO1B,QACzC,QACI,OAAO4G,MYEb4F,GAAqBC,2BAAgBC,MACrCC,GAAmBC,+BAAoBJ,IAEhCK,GAAQC,uBAAYX,GAAaQ,IAQ9CI,OAAOF,MAAQA,GCnBfG,IAASC,OACL,cAAC,IAAD,CAAUJ,MAAOA,GAAjB,SAAwB,cAAC,GAAD,MAC1BK,SAASC,eAAe,SAM1BnQ,M","file":"static/js/main.45f5a583.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"barContainer\":\"ErrorSnackBar_barContainer__kApLd\"};","import axios, {AxiosResponse} from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '73fdf213-e363-4a31-ad92-85b5d437ac0f'\r\n    },\r\n})\r\n\r\n//API\r\nexport const todolistApi = {\r\n    getTodos() {\r\n        return instance.get<Array<TodoListType>>('todo-lists')\r\n    },\r\n    createTodo(title: string) {\r\n        //return instance.post<CommonResponseType<{ item: TodoListType }>, AxiosResponse<CommonResponseType<{ item: TodoListType }>>, { title: string }>\r\n        return instance.post<{ title: string }, AxiosResponse<CommonResponseType<{ item: TodoListType }>>>\r\n        ('todo-lists', {title})\r\n    },\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<CommonResponseType, AxiosResponse<CommonResponseType>, { title: string }>(`todo-lists/${todolistId}`, {title: title})\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<CommonResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<CommonResponseType<{ item: TaskType }>>>\r\n        (`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<CommonResponseType<{ item: TaskType }>>>\r\n        (`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<CommonResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n}\r\n\r\n//Auth API\r\nexport const authApi = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<CommonResponseType<{ userId?: number }>>>('auth/login', data)\r\n    },\r\n    me() {\r\n        return instance.get<CommonResponseType<AuthMeType>>('auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<CommonResponseType>('auth/login')\r\n    },\r\n}\r\n//Types\r\nexport type TodoListType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type CommonResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsError: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport enum ResultCodes{\r\n    success=0,\r\n    failed=1,\r\n    captcha=10\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type GetTasksResponseType = {\r\n    error: null | string\r\n    items: TaskType[]\r\n    totalCount: number\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\nexport type AuthMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {createTheme} from \"@mui/material\";\r\n\r\nconst themeOptions = createTheme({\r\n    palette: {\r\n        // type: 'light',\r\n        primary: {\r\n            main: '#1c7888',\r\n        },\r\n        secondary: {\r\n            main: '#894ee3',\r\n            light: 'rgba(255,167,51,0.38)',\r\n        },\r\n        background: {\r\n            default: '#e0e0e0',\r\n            paper: 'rgba(250,250,250,0.77)',\r\n        },\r\n        error: {\r\n            main: '#e34337',\r\n        },\r\n    },\r\n})\r\n\r\nexport default themeOptions","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../redux/app-reducer\";\r\nimport {CommonResponseType, GetTasksResponseType} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const handleServerAppError = <D>(data: CommonResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred.'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkAError = (error: { message:string },dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message?error.message:'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleFetchServerAppError=(data:GetTasksResponseType,dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>)=>{\r\n    if (data.error) {\r\n        dispatch(setAppErrorAC(data.error))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred.'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}","import {Dispatch} from \"redux\";\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"./app-reducer\";\r\nimport {authApi, LoginParamsType, ResultCodes} from \"../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkAError} from \"../utils/error-utils\";\r\n\r\nconst initialState: InitialStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"login/SET-IS-LOGGED-IN\":\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Action Creators\r\nexport const setIsLoggedInAC = (value: boolean) => ({\r\n    type: 'login/SET-IS-LOGGED-IN', value\r\n} as const)\r\n\r\n\r\n//Thunks Creators\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'));\r\n    authApi.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === ResultCodes.success) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkAError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'));\r\n    authApi.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === ResultCodes.success) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkAError(error, dispatch)\r\n        })\r\n}\r\n// Types\r\nexport type InitialStateType = {\r\n    isLoggedIn: boolean\r\n}\r\nexport type SetIsLoggedInActionType = ReturnType<typeof setIsLoggedInAC>\r\ntype ActionsType = |SetIsLoggedInActionType\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authApi, ResultCodes} from \"../api/todolist-api\";\r\nimport {setIsLoggedInAC, SetIsLoggedInActionType} from \"./auth-reducer\";\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as null|string,\r\n    //true if app already/successfully initialized (user authentication, settings etc.)\r\n    isInitialized: false,\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.value}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n//Action Creators\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppInitializedAC = (value: boolean) => ({type: 'APP/SET-IS-INITIALIZED', value} as const)\r\n\r\n//Thunk Creators\r\nexport const initializeAppTC = () => (dispatch: Dispatch<ActionsType | SetIsLoggedInActionType>) => {\r\n    authApi.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === ResultCodes.success) {\r\n                dispatch(setIsLoggedInAC(true))\r\n            } else {\r\n\r\n            }\r\n            dispatch(setAppInitializedAC(true))\r\n        })\r\n}\r\n\r\n//Types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppInitializedActionType = ReturnType<typeof setAppInitializedAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | SetAppInitializedActionType","import {todolistApi, TodoListType} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"./app-reducer\";\r\nimport {handleServerNetworkAError} from \"../utils/error-utils\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.todolistId)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//Action Creators\r\nexport const removeTodolistAC = (todolistId: string) => ({\r\n    type: 'REMOVE-TODOLIST',\r\n    todolistId\r\n} as const)\r\nexport const addTodolistAC = (todolist: TodoListType) => ({\r\n    type: 'ADD-TODOLIST',\r\n    todolist\r\n} as const)\r\nexport const changeTodolistTitleAC = (title: string, todolistId: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    todolistId,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (filter: FilterValuesType, todolistId: string) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    todolistId,\r\n    filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodoListType>) => ({\r\n    type: 'SET-TODOLISTS',\r\n    todolists\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (todolistId: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    todolistId, status\r\n} as const)\r\n\r\n//Thunks Creators\r\nexport const fetchTodolistsTC = () =>\r\n    (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'));\r\n        todolistApi.getTodos()\r\n            .then(res => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'));\r\n            })\r\n            .catch(error=>{\r\n                handleServerNetworkAError(error,dispatch)\r\n            })\r\n    }\r\nexport const removeTodolistTC = (todolistId: string) =>\r\n    (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistApi.deleteTodo(todolistId)\r\n            .then(res => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n\r\nexport const addTodolistTC = (title: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistApi.createTodo(title)\r\n        .then(res => {\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\nexport const changeTodolistTitleTC = (title: string, todolistId: string) =>\r\n    (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistApi.updateTodoTitle(todolistId, title)\r\n            .then(res => {\r\n                dispatch(changeTodolistTitleAC(title, todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(changeTodolistEntityStatusAC(todolistId, 'succeeded'))\r\n            })\r\n    }\r\n\r\n\r\n//Action types\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type ChangTodolistEntityStatusActionType=ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ChangTodolistEntityStatusActionType\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistDomainType = TodoListType & { filter: FilterValuesType, entityStatus: RequestStatusType }\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType|SetAppErrorActionType>\r\n\r\n\r\n\r\n\r\n","import {\r\n    AddTodolistActionType,\r\n    changeTodolistEntityStatusAC,\r\n    ChangTodolistEntityStatusActionType,\r\n    RemoveTodolistActionType,\r\n    SetTodolistsActionType,\r\n} from \"./todolists-reducer\";\r\nimport {\r\n    ResultCodes,\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistApi,\r\n    UpdateTaskModelType\r\n} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"./app-reducer\";\r\nimport {handleFetchServerAppError, handleServerAppError, handleServerNetworkAError} from \"../utils/error-utils\";\r\n\r\nexport type TasksStateType = { [key: string]: Array<TaskType> }\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const taskReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state, [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.id ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {\r\n                ...state, [action.todolist.id]: []\r\n            }\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.todolistId]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case \"SET-TASKS\":\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Action Creators\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({\r\n    type: 'REMOVE-TASK', taskId, todolistId\r\n} as const)\r\nexport const addTaskAC = (task: TaskType) => ({\r\n    type: 'ADD-TASK', task\r\n} as const)\r\nexport const updateTaskAC = (id: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK', todolistId, id, model\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS', tasks, todolistId\r\n} as const)\r\n\r\n//Thunks Creators\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId,'loading'))\r\n    todolistApi.getTasks(todolistId)\r\n        .then(res => {\r\n            if(!res.data.error){\r\n                dispatch(setTasksAC(res.data.items, todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(changeTodolistEntityStatusAC(todolistId,'succeeded'))\r\n            }  else {\r\n                handleFetchServerAppError(res.data,dispatch)\r\n            }\r\n        })\r\n        .catch((error)=>{\r\n            handleServerNetworkAError(error,dispatch)\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(changeTodolistEntityStatusAC(todolistId,'loading'))\r\n    todolistApi.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            if(res.data.resultCode===ResultCodes.success){\r\n                dispatch(removeTaskAC(taskId, todolistId))\r\n                dispatch(changeTodolistEntityStatusAC(todolistId,'succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data,dispatch)\r\n            }\r\n        })\r\n        .catch((error)=>{\r\n            handleServerNetworkAError(error,dispatch)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId,'loading'))\r\n    todolistApi.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === ResultCodes.success) {\r\n                const action = addTaskAC(res.data.data.item)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(changeTodolistEntityStatusAC(todolistId,'succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data,dispatch)\r\n            }\r\n        })\r\n        .catch((error)=>{\r\n           handleServerNetworkAError(error,dispatch)\r\n        })\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n\r\n        if (!task) {\r\n            // throw new Error(\"Task not found in the redux\")\r\n            console.warn(\"Task not found in the redux\")\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: task.title,\r\n            description: task.description,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...domainModel\r\n        }\r\n        dispatch(changeTodolistEntityStatusAC(todolistId,'loading'))\r\n        todolistApi.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if(res.data.resultCode===ResultCodes.success){\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                    dispatch(changeTodolistEntityStatusAC(todolistId,'succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data,dispatch)\r\n                }\r\n            })\r\n            .catch((error)=>{\r\n                handleServerNetworkAError(error,dispatch)\r\n            })\r\n    }\r\n\r\n// Types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType|SetAppErrorActionType>\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    |ChangTodolistEntityStatusActionType\r\n    | ReturnType<typeof setTasksAC>\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {AddBox} from \"@mui/icons-material\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\n\r\ntype addItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?:boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem,disabled=false}: addItemFormPropsType) {\r\n        const [newTaskTitle, setNewTaskTitle] = useState(\"\")\r\n        const [error, setError] = useState<boolean>(false)\r\n\r\n        const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            error && setError(false)\r\n            setNewTaskTitle((e.currentTarget.value))\r\n        }\r\n        const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n            error && setError(false)\r\n            if (e.key === \"Enter\") {\r\n                addItemHandler()\r\n            }\r\n        }\r\n        const addItemHandler = () => {\r\n            if (newTaskTitle.trim() !== \"\"\r\n                && newTaskTitle !== \"go to hell\") {\r\n                addItem(newTaskTitle)\r\n                setNewTaskTitle(\"\")\r\n            } else {\r\n                setError(true)\r\n            }\r\n        }\r\n\r\n        return <div>\r\n            <TextField value={newTaskTitle}\r\n                       disabled={disabled}\r\n                       variant={\"outlined\"}\r\n                       label={error ? \"Title is required\" : \"Enter title\"}\r\n                       onChange={onNewTitleChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={error}\r\n                       size=\"small\"/>\r\n            <IconButton onClick={addItemHandler} color={'primary'} disabled={disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    }\r\n)","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n    disabled: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function ({title, onChange, disabled}: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [newTitle, setNewTitle] = useState(\"\")\r\n\r\n    const activateEditMode = () => {\r\n        if (disabled) return\r\n        setEditMode(true)\r\n        setNewTitle(title)\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        onChange(newTitle)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            setEditMode(false)\r\n            onChange(newTitle)\r\n        }\r\n    }\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n    }\r\n    return editMode\r\n        ? <TextField value={newTitle}\r\n                     onBlur={activateViewMode}\r\n                     onKeyPress={onKeyPressHandler}\r\n                     onChange={onChangeTitleHandler}\r\n                     autoFocus\r\n                     size=\"small\"\r\n                     variant=\"standard\"/>\r\n        : <span onDoubleClick={activateEditMode}>{title}</span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {Checkbox, IconButton} from \"@mui/material\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\";\r\n\r\nexport type TaskPropsType = {\r\n    todolistId: string\r\n    task: TaskType\r\n    removeTask: (id: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newValue: string, todolistId: string) => void\r\n    disabled: boolean\r\n}\r\n\r\nexport const Task = React.memo(function ({\r\n                                             todolistId,\r\n                                             task,\r\n                                             removeTask,\r\n                                             changeTaskStatus,\r\n                                             changeTaskTitle,\r\n                                             disabled,\r\n                                             ...restProps\r\n                                         }: TaskPropsType) {\r\n\r\n    const onRemoveHandler = () => removeTask(task.id, todolistId)\r\n    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        changeTaskStatus(task.id,\r\n            e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, todolistId)\r\n    }\r\n    const onChangeTitleHandler = useCallback((newValue: string) => {\r\n        changeTaskTitle(task.id, newValue, todolistId)\r\n    }, [changeTaskTitle, task.id, todolistId])\r\n\r\n    return (\r\n        <div key={task.id} className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n            <IconButton onClick={onRemoveHandler} aria-label=\"delete\" color=\"error\" disabled={disabled}>\r\n                <Delete/>\r\n            </IconButton>\r\n            <Checkbox checked={task.status === TaskStatuses.Completed}\r\n                      onChange={onChangeStatusHandler}\r\n                      color=\"primary\" disabled={disabled}/>\r\n            <EditableSpan title={task.title} onChange={onChangeTitleHandler} disabled={disabled}/>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {Button, IconButton, List, ListItem} from \"@mui/material\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\r\nimport {FilterValuesType, TodolistDomainType} from \"../../../redux/todolists-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"../../../redux/tasks-reducer\";\r\n\r\n\r\ntype TodolistPropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string,) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newValue: string, todolistId: string) => void\r\n    changeTodolistTitle: (newTitle: string, todolistId: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: TodolistPropsType) {\r\n    const {\r\n        todolist,tasks, removeTask, removeTodolist, changeFilter, addTask, changeTaskStatus,\r\n        changeTaskTitle, changeTodolistTitle, demo = false\r\n    } = props\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) return\r\n        dispatch(fetchTasksTC(todolist.id))\r\n    }, [dispatch, todolist.id, demo])\r\n\r\n    console.log(\"todolist is rendering\")\r\n    const onAllClickHandler = useCallback(() => changeFilter(\"all\", todolist.id), [changeFilter, todolist.id])\r\n    const onActiveClickHandler = useCallback(() => changeFilter(\"active\", todolist.id), [changeFilter, todolist.id])\r\n    const onCompletedClickHandler = useCallback(() => changeFilter(\"completed\", todolist.id), [changeFilter, todolist.id])\r\n    const onRemoveTodolistHandler = useCallback(() => removeTodolist(todolist.id), [removeTodolist, todolist.id])\r\n    const onchangeTodolistTitleHandler = useCallback((newValue: string) => changeTodolistTitle(newValue, todolist.id), [changeTodolistTitle, todolist.id])\r\n    const onAddTask = useCallback((title: string) => addTask(title, todolist.id), [addTask, todolist.id])\r\n\r\n    let tasksForTodolist = tasks\r\n\r\n    if (todolist.filter === \"active\") {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (todolist.filter === \"completed\") {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><IconButton onClick={onRemoveTodolistHandler} aria-label=\"delete\" color=\"error\"\r\n        disabled={todolist.entityStatus==='loading'}>\r\n            <Delete/>\r\n        </IconButton>\r\n            <EditableSpan onChange={onchangeTodolistTitleHandler} title={todolist.title}\r\n            disabled={todolist.entityStatus==='loading'}/>\r\n        </h3>\r\n        <AddItemForm addItem={onAddTask} disabled={todolist.entityStatus==='loading'}/>\r\n        <div>\r\n            <List sx={{bgcolor: \"background.paper\"}}>\r\n                {tasksForTodolist.map(t =>\r\n                    <ListItem key={t.id}>\r\n                        <Task\r\n                            todolistId={todolist.id}\r\n                            disabled={todolist.entityStatus==='loading'}\r\n                            task={t}\r\n                            removeTask={removeTask}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            changeTaskTitle={changeTaskTitle}/>\r\n                    </ListItem>)\r\n                }</List>\r\n        </div>\r\n        <div style={{padding: \"10px\"}}>\r\n            <Button variant={todolist.filter === \"all\" ? \"contained\" : undefined} onClick={onAllClickHandler}\r\n                    color=\"inherit\" disabled={todolist.entityStatus==='loading'}>All</Button>\r\n            <Button color=\"primary\" variant={todolist.filter === \"active\" ? \"contained\" : undefined}\r\n                    onClick={onActiveClickHandler} disabled={todolist.entityStatus==='loading'}>Active\r\n            </Button>\r\n            <Button color=\"secondary\" variant={todolist.filter === \"completed\" ? \"contained\" : undefined}\r\n                    onClick={onCompletedClickHandler} disabled={todolist.entityStatus==='loading'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/store\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from \"../../redux/todolists-reducer\";\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from \"../../redux/tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/todolist-api\";\r\nimport {Grid, Paper} from \"@mui/material\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false, ...props}) => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) return\r\n        dispatch(fetchTodolistsTC())\r\n    }, [dispatch, demo, isLoggedIn])\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskTC(id, todolistId))\r\n    }, [dispatch])\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskTC(title, todolistId))\r\n    }, [dispatch])\r\n    const changeStatus = useCallback((taskId: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC(taskId, {status}, todolistId))\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string, todolistId: string) => {\r\n        dispatch(updateTaskTC(taskId, {title: newTitle}, todolistId))\r\n    }, [dispatch])\r\n    const changeTodolistTitle = useCallback((newTitle: string, todolistId: string) => {\r\n        dispatch(changeTodolistTitleTC(newTitle, todolistId))\r\n    }, [dispatch])\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        const action = changeTodolistFilterAC(value, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(removeTodolistTC(id))\r\n    }, [dispatch])\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to=\"/login\"/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: \"20px\"}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={10} justifyContent=\"center\">\r\n            {\r\n                todolists.map(tl => {\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper elevation={12} style={{padding: \"10px\"}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={tasks[tl.id]}\r\n                                removeTask={removeTask}\r\n                                removeTodolist={removeTodolist}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import * as React from 'react';\r\nimport {useState} from 'react';\r\nimport Snackbar, {SnackbarOrigin} from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../redux/store';\r\nimport {setAppErrorAC} from '../../redux/app-reducer';\r\nimport s from './ErrorSnackBar.module.css'\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackBar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const [state, setState] = useState<SnackbarOrigin>({\r\n        vertical: 'bottom',\r\n        horizontal: 'center',\r\n    })\r\n    const {vertical, horizontal} = state;\r\n\r\n    const isOpen = error !== null\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n        // setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div className={s.barContainer}>\r\n            <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose} anchorOrigin={{vertical, horizontal}}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from \"@mui/material\";\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"../../redux/auth-reducer\";\r\nimport {AppRootStateType} from \"../../redux/store\";\r\nimport {Navigate} from 'react-router-dom';\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        }\r\n    })\r\n    if (isLoggedIn) {\r\n        return <Navigate to=\"/\"/>\r\n    }\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}\r\n                               rel=\"noopener noreferrer nofollow\"> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\" margin=\"normal\" {...formik.getFieldProps('email')}/>\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField type=\"password\" label=\"Password\"\r\n                                   margin=\"normal\" {...formik.getFieldProps('password')}/>\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox\r\n                                              name=\"rememberMe\"/>} {...formik.getFieldProps('rememberMe')}\r\n                                          checked={formik.values.rememberMe}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n\r\n};\r\n\r\nexport default Login;","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport Box from '@mui/material/Box';\r\nimport {Menu} from \"@mui/icons-material\";\r\nimport themeOptions from \"../common/color-sheme\";\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport {ErrorSnackBar} from \"../components/ErrorSnackBar/ErrorSnackBar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../redux/store\";\r\nimport {initializeAppTC, RequestStatusType} from \"../redux/app-reducer\";\r\nimport {BrowserRouter, Route, Routes} from \"react-router-dom\";\r\nimport Login from \"../features/Login/Login\";\r\nimport {logoutTC} from \"../redux/auth-reducer\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport ThemeProvider from '@mui/material/styles/ThemeProvider';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Button from '@mui/material/Button';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport Container from '@mui/material/Container';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <CircularProgress size={40}\r\n                                 sx={{\r\n                                     color: 'primary',\r\n                                     position: 'absolute',\r\n                                     top: '50%',\r\n                                     left: '50%',\r\n                                     marginTop: '-20px',\r\n                                     marginLeft: '-20px',\r\n                                 }}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <ThemeProvider theme={themeOptions}>\r\n                <div className=\"App\">\r\n                    <Box sx={{flexGrow: 1}}>\r\n                        {/* eslint-disable-next-line react/jsx-no-undef */}\r\n                        <AppBar position={\"static\"}>\r\n                            <Toolbar>\r\n                                <IconButton edge={\"start\"} color={\"inherit\"} aria-label=\"menu\" size=\"large\"\r\n                                            sx={{mr: 2}}>\r\n                                    <Menu/>\r\n                                </IconButton>\r\n                                <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                                    News\r\n                                </Typography>\r\n                                {isLoggedIn && <Button color={\"inherit\"} onClick={logoutHandler}>Log out</Button>}\r\n                            </Toolbar>\r\n                            {status === 'loading' && <LinearProgress color='secondary'/>}\r\n                        </AppBar>\r\n                        <ErrorSnackBar/>\r\n                    </Box>\r\n                    <Container fixed>\r\n                        <Routes>\r\n                            <Route path=\"*\" element={<TodolistsList demo={demo}/>}/>\r\n                            <Route path=\"/login\" element={<Login/>}/>\r\n                        </Routes>\r\n\r\n                    </Container>\r\n                </div>\r\n            </ThemeProvider>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {taskReducer} from \"./tasks-reducer\";\r\nimport {todolistsReducer} from \"./todolists-reducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todolists: todolistsReducer,\r\n    app:appReducer,\r\n    auth:authReducer\r\n})\r\n\r\nconst middlewareEnhancer = applyMiddleware(thunkMiddleware)\r\nconst composeEnhancers = composeWithDevTools(middlewareEnhancer)\r\n\r\nexport const store = createStore(rootReducer, composeEnhancers)\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n//export const useAppDispatch = () => useDispatch<AppDispatch>()\r\n// export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from \"./app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}><App /></Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
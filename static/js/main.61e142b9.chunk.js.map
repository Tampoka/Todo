{"version":3,"sources":["api/todolist-api.ts","reportWebVitals.ts","AddItemForm.tsx","state/todolist-reducer.ts","state/tasks-reducer.ts","EditableSpan.tsx","Task.tsx","Todolist.tsx","common/color-sheme.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddItemForm","React","memo","props","useState","newTaskTitle","setNewTaskTitle","error","setError","addTask","trim","addItem","TextField","value","variant","label","onChange","e","currentTarget","onKeyPress","key","size","IconButton","onClick","color","AddBox","initialState","axios","create","baseURL","withCredentials","headers","EditableSpan","editMode","setEditMode","title","setTitle","onBlur","autoFocus","onDoubleClick","Task","onChangeTitleHandler","useCallback","newValue","changeTaskTitle","task","id","todolistId","className","status","Completed","removeTask","aria-label","Delete","Checkbox","checked","changeTaskStatus","New","Todolist","tasks","removeTodolist","changeFilter","changeTodolistTitle","filter","console","log","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","onRemoveTodolistHandler","onchangeTodolistTitleHandler","onAddTask","tasksForTodolist","t","List","sx","bgcolor","map","ListItem","style","padding","Button","undefined","themeOptions","createTheme","palette","primary","main","secondary","light","background","default","paper","AppWithRedux","todolists","useSelector","state","dispatch","useDispatch","action","taskId","type","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","changeTodolistTitleAC","todolistFilter","changeTodolistFilterAC","addTodolist","v1","addTodolistAC","ThemeProvider","theme","Box","flexGrow","AppBar","position","Toolbar","edge","mr","Menu","Typography","component","Container","fixed","Grid","container","spacing","justifyContent","tl","item","Paper","elevation","rootReducer","combineReducers","newState","newTask","description","priority","startDate","deadline","todoListId","order","addedDate","todolistTasks","newTasksArray","todolistsTasks","taskToChangeTitle","find","newTodolist","todolistToChangeTitle","todolistToChangeFilter","composeEnhancers","composeWithDevTools","store","createStore","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61e142b9.chunk.js","sourcesContent":["import axios, {AxiosResponse} from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '73fdf213-e363-4a31-ad92-85b5d437ac0f'\r\n    },\r\n})\r\n\r\nexport const todolistApi = {\r\n    getTodos() {\r\n        return instance.get<Array<TodoListType>>('todo-lists')\r\n    },\r\n    // createTodo(title: string) {\r\n    //     return instance.post<CommonResponseType<{ item: TodoListType }>, AxiosResponse<CommonResponseType<{ item: TodoListType }>>, { title: string }>\r\n    //     ('todo-lists', {title})\r\n    // },\r\n    createTodo(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<CommonResponseType<{ item: TodoListType }>>>\r\n        ('todo-lists', {title})\r\n    },\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<CommonResponseType, AxiosResponse<CommonResponseType>, { title: string }>(`todo-lists/${todolistId}`, {title: title})\r\n    },\r\n\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<CommonResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<CommonResponseType<{ item: TaskType }>>>\r\n        (`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<CommonResponseType<{ item: TaskType }>>>\r\n        (`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<CommonResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    }\r\n}\r\n\r\n//types\r\nexport type TodoListType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\ntype CommonResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsError: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype GetTasksResponseType<T = {}> = {\r\n    error: null | string\r\n    items: TaskType[]\r\n    totalCount: number\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {AddBox} from \"@mui/icons-material\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\n\r\ntype addItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: addItemFormPropsType) {\r\n        const [newTaskTitle, setNewTaskTitle] = useState(\"\")\r\n        const [error, setError] = useState<boolean>(false)\r\n\r\n        const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            error && setError(false)\r\n            setNewTaskTitle((e.currentTarget.value))\r\n        }\r\n        const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n            error && setError(false)\r\n            if (e.key === \"Enter\") {\r\n                addTask()\r\n            }\r\n        }\r\n        const addTask = () => {\r\n            if (newTaskTitle.trim() !== \"\"\r\n                && newTaskTitle !== \"go to hell\") {\r\n                props.addItem(newTaskTitle)\r\n                setNewTaskTitle(\"\")\r\n            } else {\r\n                setError(true)\r\n            }\r\n        }\r\n\r\n        return <div>\r\n            <TextField value={newTaskTitle}\r\n                       variant={\"outlined\"}\r\n                       label={error ? \"Title is required\" : \"Enter title\"}\r\n                       onChange={onNewTitleChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={error}\r\n                       size=\"small\"/>\r\n            <IconButton onClick={addTask} color={'primary'}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    }\r\n)","import {v1} from \"uuid\";\r\nimport {TodoListType} from \"../api/todolist-api\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistDomainType = TodoListType & { filter: FilterValuesType }\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            let newTodolist: TodolistDomainType = {\r\n                id: action.todolistId,\r\n                filter: \"all\",\r\n                title: action.title,\r\n                addedDate: '',\r\n                order: 0\r\n            }\r\n            return [newTodolist, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            let todolistToChangeTitle = state.find(tl => tl.id === action.id)\r\n            if (todolistToChangeTitle) {\r\n                todolistToChangeTitle.title = action.title\r\n            }\r\n            return [...state]\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            let todolistToChangeFilter = state.find(tl => tl.id === action.id)\r\n            if (todolistToChangeFilter) {\r\n                todolistToChangeFilter.filter = action.filter\r\n            }\r\n            return [...state]\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//Action Creators\r\nexport const removeTodolistAC = (todolistId: string) => ({\r\n    type: 'REMOVE-TODOLIST',\r\n    id: todolistId\r\n} as const)\r\nexport const addTodolistAC = (title: string) => ({\r\n    type: 'ADD-TODOLIST',\r\n    title: title,\r\n    todolistId: v1()\r\n} as const)\r\nexport const changeTodolistTitleAC = (newTitle: string, todolistId: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: todolistId,\r\n    title: newTitle\r\n} as const)\r\nexport const changeTodolistFilterAC = (todolistFilter: FilterValuesType, todolistId: string) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: todolistId,\r\n    filter: todolistFilter\r\n} as const)\r\n\r\n//Action types\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n\r\n\r\n\r\n\r\n","import {v1} from \"uuid\";\r\nimport {\r\n    AddTodolistActionType,\r\n    RemoveTodolistActionType,\r\n} from \"./todolist-reducer\";\r\nimport {TaskStatuses, TaskType} from \"../api/todolist-api\";\r\n\r\nexport type TasksStateType = { [key: string]: Array<TaskType> }\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const taskReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            let newState = state[action.todolistId].filter(t => t.id !== action.id)\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: newState\r\n            }\r\n        case 'ADD-TASK':\r\n            let newTask = {\r\n                id: v1(),\r\n                title: action.title,\r\n                // status: TaskStatuses.New,\r\n                status: TaskStatuses.New,\r\n                description: 'new task',\r\n                priority: 0,\r\n                startDate: '',\r\n                deadline: '',\r\n                todoListId: action.todolistId,\r\n                order: 0,\r\n                addedDate: ''\r\n            }\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: [newTask, ...state[action.todolistId]]\r\n            }\r\n        case 'CHANGE-TASK-STATUS':\r\n            let todolistTasks = state[action.todolistId]\r\n            let newTasksArray = todolistTasks.map(t => t.id === action.id ? {...t, status: action.status} : t)\r\n\r\n            state[action.todolistId] = newTasksArray\r\n            return ({...state})\r\n        case 'CHANGE-TASK-TITLE':\r\n            let todolistsTasks = state[action.todolistId]\r\n            let taskToChangeTitle = todolistsTasks.find(t => t.id === action.id)\r\n            if (taskToChangeTitle) {\r\n                taskToChangeTitle.title = action.title\r\n            }\r\n            state[action.todolistId] = [...todolistsTasks]\r\n            return {...state}\r\n        case 'ADD-TODOLIST':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        case 'REMOVE-TODOLIST':\r\n            delete (state[action.id])\r\n            return {...state}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Action Creators\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({\r\n    type: 'REMOVE-TASK',\r\n    id: taskId,\r\n    todolistId: todolistId\r\n} as const)\r\nexport const addTaskAC = (title: string, todolistId: string) => ({\r\n    type: 'ADD-TASK',\r\n    title: title,\r\n    todolistId: todolistId\r\n} as const)\r\nexport const changeTaskStatusAC = (id: string, status: TaskStatuses, todolistId: string) => ({\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId,\r\n    id,\r\n    status\r\n} as const)\r\nexport const changeTaskTitleAC = (id: string, newTitle: string, todolistId: string) => ({\r\n    type: 'CHANGE-TASK-TITLE',\r\n    id: id,\r\n    title: newTitle,\r\n    todolistId: todolistId\r\n} as const)\r\n\r\n//Action Types\r\ntype ActionsType =\r\n    ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changeTaskStatusAC>\r\n    | ReturnType<typeof changeTaskTitleAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            setEditMode(false)\r\n            props.onChange(title)\r\n        }\r\n    }\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    return editMode\r\n        ? <TextField value={title}\r\n                     onBlur={activateViewMode}\r\n                     onKeyPress={onKeyPressHandler}\r\n                     onChange={onChangeTitleHandler}\r\n                     autoFocus\r\n                     size=\"small\"\r\n                     variant=\"standard\"/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {Checkbox, IconButton} from \"@mui/material\";\r\nimport {TaskStatuses, TaskType} from \"./api/todolist-api\";\r\n\r\nexport type TaskPropsType = {\r\n    todolistId:string\r\n    task:TaskType\r\n    removeTask: (id: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newValue: string, todolistId: string) => void\r\n}\r\n\r\nexport const Task = React.memo(function (props: TaskPropsType) {\r\n\r\n    const onRemoveHandler = () => props.removeTask(props.task.id, props.todolistId)\r\n\r\n    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.task.id,\r\n            e.currentTarget.checked?TaskStatuses.Completed:TaskStatuses.New, props.todolistId)\r\n    }\r\n\r\n    const onChangeTitleHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    },[props.changeTaskTitle,props.task.id, props.todolistId])\r\n\r\n\r\n    return (\r\n        <div key={props.task.id} className={props.task.status===TaskStatuses.Completed?\"is-done\":\"\"}>\r\n            <IconButton onClick={onRemoveHandler} aria-label=\"delete\" color=\"error\">\r\n                <Delete/>\r\n            </IconButton>\r\n            <Checkbox checked={props.task.status===TaskStatuses.Completed}\r\n                      onChange={onChangeStatusHandler}\r\n            color=\"primary\"/>\r\n            <EditableSpan title={props.task.title} onChange={onChangeTitleHandler}/>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {useCallback} from \"react\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Task} from \"./Task\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {Button, IconButton, List, ListItem} from \"@mui/material\";\r\nimport {TaskStatuses, TaskType} from \"./api/todolist-api\";\r\nimport {FilterValuesType} from \"./state/todolist-reducer\";\r\n\r\n\r\ntype TodolistPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string,) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newValue: string, todolistId: string) => void\r\n    changeTodolistTitle: (newTitle: string, todolistId: string) => void\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: TodolistPropsType) {\r\n    const {\r\n        id, title, tasks, removeTask, removeTodolist, changeFilter, addTask, changeTaskStatus,\r\n        changeTaskTitle, changeTodolistTitle, filter\r\n    } = props\r\n\r\n    console.log(\"todolist is rendering\")\r\n    const onAllClickHandler = useCallback(() => changeFilter(\"all\", id), [changeFilter, id])\r\n    const onActiveClickHandler = useCallback(() => changeFilter(\"active\", id), [changeFilter, id])\r\n    const onCompletedClickHandler = useCallback(() => changeFilter(\"completed\", id), [changeFilter, id])\r\n    const onRemoveTodolistHandler = useCallback(() => removeTodolist(id), [removeTodolist, id])\r\n    const onchangeTodolistTitleHandler = useCallback((newValue: string) => changeTodolistTitle(newValue, id), [changeTodolistTitle, id])\r\n    const onAddTask = useCallback((title: string) => addTask(title, id), [addTask, id])\r\n\r\n    let tasksForTodolist = tasks\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (filter === \"completed\") {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><IconButton onClick={onRemoveTodolistHandler} aria-label=\"delete\" color=\"error\">\r\n            <Delete/>\r\n        </IconButton>\r\n            <EditableSpan onChange={onchangeTodolistTitleHandler} title={title}/>\r\n        </h3>\r\n        <AddItemForm addItem={onAddTask}/>\r\n        <div>\r\n            <List sx={{bgcolor: \"background.paper\"}}>\r\n                {tasksForTodolist.map(t =>\r\n                    <ListItem key={t.id}>\r\n                        <Task\r\n                            todolistId={id}\r\n                            task={t}\r\n                            removeTask={removeTask}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            changeTaskTitle={changeTaskTitle}/>\r\n                    </ListItem>)\r\n                }</List>\r\n        </div>\r\n        <div style={{padding: \"10px\"}}>\r\n            <Button variant={filter === \"all\" ? \"contained\" : undefined} onClick={onAllClickHandler}\r\n                    color=\"inherit\">All</Button>\r\n            <Button color=\"primary\" variant={filter === \"active\" ? \"contained\" : undefined}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button color=\"secondary\" variant={filter === \"completed\" ? \"contained\" : undefined}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n","import {createTheme} from \"@mui/material\";\r\n\r\nconst themeOptions = createTheme({\r\n    palette: {\r\n        // type: 'light',\r\n        primary: {\r\n            main: '#1c7888',\r\n        },\r\n        secondary: {\r\n            main: '#894ee3',\r\n            light: 'rgba(255,167,51,0.38)',\r\n        },\r\n        background: {\r\n            default: '#e0e0e0',\r\n            paper: 'rgba(250,250,250,0.77)',\r\n        },\r\n        error: {\r\n            main: '#e34337',\r\n        },\r\n    },\r\n})\r\n\r\nexport default themeOptions","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    FilterValuesType,\r\n    removeTodolistAC,\r\n    TodolistDomainType\r\n} from \"./state/todolist-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, TasksStateType} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {Todolist} from \"./Todolist\";\r\nimport Box from '@mui/material/Box';\r\nimport {Menu} from \"@mui/icons-material\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, ThemeProvider, Toolbar, Typography} from \"@mui/material\";\r\nimport themeOptions from \"./common/color-sheme\";\r\nimport {TaskStatuses} from \"./api/todolist-api\";\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        const action = removeTaskAC(id, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        const action = addTaskAC(title, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeStatus = useCallback((taskId: string, status: TaskStatuses, todolistId: string) => {\r\n        const action = changeTaskStatusAC(taskId, status, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string, todolistId: string) => {\r\n        const action = changeTaskTitleAC(taskId, newTitle, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeTodolistTitle = useCallback((newTitle: string, todolistId: string) => {\r\n        const action = changeTodolistTitleAC(newTitle, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        const action = changeTodolistFilterAC(value, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const removeTodolist = useCallback((id: string) => {\r\n        const action = removeTodolistAC(id)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const addTodolist = useCallback((title: string) => {\r\n        const action = addTodolistAC(title)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <ThemeProvider theme={themeOptions}>\r\n            <div className=\"App\">\r\n                <Box sx={{flexGrow: 1}}>\r\n                    {/* eslint-disable-next-line react/jsx-no-undef */}\r\n                    <AppBar position={\"static\"}>\r\n                        <Toolbar>\r\n                            <IconButton edge={\"start\"} color={\"inherit\"} aria-label=\"menu\" size=\"large\" sx={{mr: 2}}>\r\n                                <Menu/>\r\n                            </IconButton>\r\n                            <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                                News\r\n                            </Typography>\r\n                            <Button color={\"inherit\"}>Login</Button>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                </Box>\r\n                <Container fixed>\r\n                    <Grid container style={{padding: \"20px\"}}>\r\n                        <AddItemForm addItem={addTodolist}/>\r\n                    </Grid>\r\n                    <Grid container spacing={10} justifyContent=\"center\">{\r\n                        todolists.map(tl => {\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper elevation={12} style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasks[tl.id]}\r\n                                        removeTask={removeTask}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                        filter={tl.filter}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                    </Grid>\r\n                </Container>\r\n            </div>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {taskReducer} from \"./tasks-reducer\";\r\nimport {todolistReducer} from \"./todolist-reducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todolists: todolistReducer\r\n})\r\n\r\nconst composeEnhancers = composeWithDevTools\r\n\r\nexport const store=createStore(rootReducer,composeEnhancers())\r\n\r\nexport type AppRootStateType=ReturnType<typeof rootReducer>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store=store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}><AppWithRedux /></Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
{"version":3,"sources":["components/ErrorSnackBar/ErrorSnackBar.module.css","api/todolist-api.ts","reportWebVitals.ts","common/color-sheme.ts","api/config.ts","utils/error-utils.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/todolists-reducer.ts","redux/tasks-reducer.ts","redux/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["module","exports","TaskStatuses","TaskPriorities","ResultCodes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","themeOptions","createTheme","palette","primary","main","secondary","light","background","default","paper","error","instance","axios","create","baseURL","process","withCredentials","headers","todolistApi","get","title","post","todolistId","put","delete","taskId","model","authApi","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","status","handleServerNetworkAError","message","handleFetchServerAppError","loginTC","createAsyncThunk","param","a","rejectWithValue","res","resultCode","success","errors","fieldsErrors","undefined","logoutTC","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","initializeAppTC","setIsInitializedAC","isInitialized","appReducer","fetchTodolistsTC","todolists","removeTodolistTC","changeTodolistEntityStatusAC","addTodolistTC","todolist","item","changeTodolistTitleTC","changeTodolistFilterAC","index","findIndex","tl","id","filter","entityStatus","map","splice","unshift","todolistsReducer","fetchTasksTC","tasks","items","removeTaskTC","addTaskTC","task","updateTaskTC","getState","find","t","apiModel","description","priority","startDate","deadline","domainModel","tasksReducer","forEach","todoListId","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","useAppSelector","useSelector","AddItemForm","React","memo","addItem","disabled","useState","newTaskTitle","setNewTaskTitle","setError","addItemHandler","trim","TextField","variant","label","onChange","e","currentTarget","onKeyPress","key","size","IconButton","onClick","color","AddBox","EditableSpan","editMode","setEditMode","newTitle","setNewTitle","onBlur","autoFocus","onDoubleClick","Task","removeTask","changeTaskStatus","changeTaskTitle","onChangeTitleHandler","useCallback","newValue","className","Completed","aria-label","Delete","Checkbox","checked","New","Todolist","props","removeTodolist","changeFilter","addTask","changeTodolistTitle","demo","useDispatch","useEffect","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","onRemoveTodolistHandler","onchangeTodolistTitleHandler","onAddTask","tasksForTodolist","List","sx","bgcolor","ListItem","style","padding","Button","TodolistsList","changeStatus","addTodolist","Grid","container","spacing","justifyContent","Paper","elevation","to","Alert","ref","ErrorSnackBar","vertical","horizontal","isOpen","handleClose","event","reason","s","barContainer","Snackbar","open","autoHideDuration","onClose","anchorOrigin","severity","width","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","formikHelpers","rejected","match","setFieldError","field","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","autoComplete","type","FormControlLabel","control","App","logoutHandler","basename","ThemeProvider","theme","Box","flexGrow","AppBar","position","Toolbar","edge","mr","Menu","Typography","component","LinearProgress","Container","fixed","path","element","CircularProgress","top","left","marginTop","marginLeft","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a0070b4a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"barContainer\":\"ErrorSnackBar_barContainer__kApLd\"};","import {AxiosResponse} from \"axios\";\r\nimport {instance} from \"./config\";\r\n\r\n//API\r\nexport const todolistApi = {\r\n    getTodos() {\r\n        return instance.get<Array<TodoListType>>('todo-lists')\r\n    },\r\n    createTodo(title: string) {\r\n        //return instance.post<CommonResponseType<{ item: TodoListType }>, AxiosResponse<CommonResponseType<{ item: TodoListType }>>, { title: string }>\r\n        return instance.post<{ title: string }, AxiosResponse<CommonResponseType<{ item: TodoListType }>>>\r\n        ('todo-lists', {title})\r\n    },\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<CommonResponseType, AxiosResponse<CommonResponseType>, { title: string }>(`todo-lists/${todolistId}`, {title: title})\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<CommonResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<CommonResponseType<{ item: TaskType }>>>\r\n        (`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<CommonResponseType<{ item: TaskType }>>>\r\n        (`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<CommonResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n}\r\n\r\n//Auth API\r\nexport const authApi = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<CommonResponseType<{ userId?: number }>>>('auth/login', data)\r\n    },\r\n    me() {\r\n        return instance.get<CommonResponseType<AuthMeType>>('auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<CommonResponseType>('auth/login')\r\n    },\r\n}\r\n//Types\r\nexport type TodoListType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type FieldErrorType = { field: string; error: string };\r\nexport type CommonResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport enum ResultCodes{\r\n    success=0,\r\n    failed=1,\r\n    captcha=10\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type GetTasksResponseType = {\r\n    error: null | string\r\n    items: TaskType[]\r\n    totalCount: number\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\nexport type AuthMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {createTheme} from \"@mui/material\";\r\n\r\nconst themeOptions = createTheme({\r\n    palette: {\r\n        // type: 'light',\r\n        primary: {\r\n            main: '#1c7888',\r\n        },\r\n        secondary: {\r\n            main: '#894ee3',\r\n            light: 'rgba(255,167,51,0.38)',\r\n        },\r\n        background: {\r\n            default: '#e0e0e0',\r\n            paper: 'rgba(250,250,250,0.77)',\r\n        },\r\n        error: {\r\n            main: '#e34337',\r\n        },\r\n    },\r\n})\r\n\r\nexport default themeOptions","import axios from \"axios\"\r\n\r\nconst developmentMode = true\r\n\r\nexport const instance = developmentMode\r\n    ? axios.create({\r\n        baseURL: process.env.REACT_APP_BASE_URL,\r\n        withCredentials: true,\r\n        headers: {\r\n            'API-KEY': process.env.REACT_APP_API_KEY!,\r\n        }\r\n    })\r\n    : axios.create({\r\n        baseURL: process.env.REACT_APP_BASE_URL,\r\n    })","import {setAppErrorAC, setAppStatusAC} from \"../redux/app-reducer\";\r\nimport {CommonResponseType, GetTasksResponseType} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const handleServerAppError = <D>(data: CommonResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error:data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error:'Some error occurred.'}))\r\n    }\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkAError = (error: { message:string },dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error:error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n\r\nexport const handleFetchServerAppError=(data:GetTasksResponseType,dispatch: Dispatch)=>{\r\n    if (data.error) {\r\n        dispatch(setAppErrorAC({error:data.error}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error:'Some error occurred.'}))\r\n    }\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}","import {setAppStatusAC} from \"./app-reducer\";\r\nimport {authApi, FieldErrorType, LoginParamsType, ResultCodes} from \"../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkAError} from \"../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\nexport const loginTC = createAsyncThunk<undefined, LoginParamsType, { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> } }>('auth/login', async (param, {dispatch,rejectWithValue}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}));\r\n    try {\r\n        const res = await authApi.login(param)\r\n        if (res.data.resultCode === ResultCodes.success) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}));\r\n            return;\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n        }\r\n    } catch (err) {\r\n        const error: AxiosError = err\r\n        handleServerNetworkAError(error, dispatch)\r\n        return rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n    }\r\n})\r\n\r\nexport const logoutTC = createAsyncThunk('auth/logout', async (param, {dispatch,rejectWithValue}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}));\r\n    try {\r\n        const res = await authApi.logout()\r\n                if (res.data.resultCode === ResultCodes.success) {\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}));\r\n                    return;\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                    return rejectWithValue({})\r\n                }\r\n    } catch (error) {\r\n        handleServerNetworkAError(error, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(loginTC.fulfilled, (state) => {\r\n            state.isLoggedIn = true\r\n        })\r\n        builder.addCase(logoutTC.fulfilled, (state) => {\r\n            state.isLoggedIn = false\r\n        })\r\n    }\r\n})\r\nexport const authReducer = slice.reducer\r\n\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {authApi, ResultCodes} from \"../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkAError} from \"../utils/error-utils\";\r\nimport {setIsLoggedInAC} from \"./auth-reducer\";\r\n\r\nexport const initializeAppTC = createAsyncThunk('app/initializeApp', async (param, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}));\r\n    try {\r\n        const res = await authApi.me()\r\n        if (res.data.resultCode === ResultCodes.success) {\r\n            dispatch(setIsLoggedInAC({value: true}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}));\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkAError(error, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n    finally {\r\n        dispatch(setIsInitializedAC({isInitialized:true}))\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle' as RequestStatusType,\r\n        error: null as string | null,\r\n        isInitialized: false,\r\n    },\r\n    reducers: {\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setIsInitializedAC(state, action:PayloadAction<{isInitialized:boolean}>){\r\n            state.isInitialized=action.payload.isInitialized\r\n        }\r\n    },\r\n})\r\nexport const appReducer = slice.reducer\r\n\r\nexport const {setAppErrorAC, setAppStatusAC,setIsInitializedAC} = slice.actions\r\n\r\n//Types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n\r\n","import {todolistApi, TodoListType} from \"../api/todolist-api\";\r\nimport {RequestStatusType, setAppStatusAC} from \"./app-reducer\";\r\nimport {handleServerNetworkAError} from \"../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {logoutTC} from \"./auth-reducer\";\r\n\r\nexport const fetchTodolistsTC = createAsyncThunk('todolists/fetchTodolists', async (param, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistApi.getTodos()\r\n        // if (!res.data.error) {\r\n        dispatch(setAppStatusAC({status: 'succeeded'}));\r\n        return {todolists: res.data}\r\n        // } else {\r\n        //     handleFetchServerAppError(res.data, dispatch)\r\n        //     return rejectWithValue({})\r\n        // }\r\n    } catch (error) {\r\n        handleServerNetworkAError(error, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\nexport const removeTodolistTC = createAsyncThunk('todolists/removeTodolists', async (param: { todolistId: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatusAC({todolistId: param.todolistId, status: 'loading'}))\r\n    try {\r\n        await todolistApi.deleteTodo(param.todolistId)\r\n        dispatch(setAppStatusAC({status: 'succeeded'}));\r\n        dispatch(changeTodolistEntityStatusAC({todolistId: param.todolistId, status: 'succeeded'}))\r\n        return {todolistId: param.todolistId}\r\n    } catch (error) {\r\n        handleServerNetworkAError(error, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\nexport const addTodolistTC = createAsyncThunk('todolists/addTodolist', async (param: { title: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistApi.createTodo(param.title)\r\n        dispatch(setAppStatusAC({status: 'succeeded'}));\r\n        return {todolist: res.data.data.item}\r\n    } catch (error) {\r\n        handleServerNetworkAError(error, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\nexport const changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitle', async (param: { title: string, todolistId: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatusAC({todolistId: param.todolistId, status: 'loading'}))\r\n    try {\r\n        await todolistApi.updateTodoTitle(param.todolistId, param.title)\r\n        dispatch(setAppStatusAC({status: 'succeeded'}));\r\n        dispatch(changeTodolistEntityStatusAC({todolistId: param.todolistId, status: 'succeeded'}))\r\n        return {title: param.title, todolistId: param.todolistId}\r\n    } catch (error) {\r\n        handleServerNetworkAError(error, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ filter: FilterValuesType, todolistId: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            if (index > -1) {\r\n                state[index].filter = action.payload.filter\r\n            }\r\n        },\r\n\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ todolistId: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            if (index > -1) {\r\n                state[index].entityStatus = action.payload.status\r\n            }\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        })\r\n        builder.addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            if (index > -1) {\r\n                state[index].title = action.payload.title\r\n            }\r\n        })\r\n        builder.addCase(logoutTC.fulfilled, (state, action) => {\r\n            return state = []\r\n        })\r\n    }\r\n})\r\nexport const todolistsReducer = slice.reducer\r\nexport const {changeTodolistFilterAC, changeTodolistEntityStatusAC} = slice.actions\r\n\r\n\r\n//TYPES\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistDomainType = TodoListType & { filter: FilterValuesType, entityStatus: RequestStatusType }\r\n\r\n\r\n\r\n\r\n","import {addTodolistTC, changeTodolistEntityStatusAC, fetchTodolistsTC, removeTodolistTC} from \"./todolists-reducer\";\r\nimport {\r\n    ResultCodes,\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistApi,\r\n    UpdateTaskModelType\r\n} from \"../api/todolist-api\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\nimport {handleFetchServerAppError, handleServerAppError, handleServerNetworkAError} from \"../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nexport type TasksStateType = { [key: string]: Array<TaskType> }\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatusAC({todolistId: todolistId, status: 'loading'}))\r\n    try {\r\n        const res = await todolistApi.getTasks(todolistId)\r\n        if (!res.data.error) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            dispatch(changeTodolistEntityStatusAC({todolistId: todolistId, status: 'succeeded'}))\r\n            return {tasks: res.data.items, todolistId}\r\n        } else {\r\n            handleFetchServerAppError(res.data, dispatch)\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkAError(error, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\nexport const removeTaskTC = createAsyncThunk('tasks/removeTasks', async (param: { taskId: string, todolistId: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(changeTodolistEntityStatusAC({todolistId: param.todolistId, status: 'loading'}))\r\n    try {\r\n        const res = await todolistApi.deleteTask(param.todolistId, param.taskId)\r\n        if (res.data.resultCode === ResultCodes.success) {\r\n            dispatch(changeTodolistEntityStatusAC({todolistId: param.todolistId, status: 'succeeded'}))\r\n            return {taskId: param.taskId, todolistId: param.todolistId}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkAError(error, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\nexport const addTaskTC = createAsyncThunk('tasks/addTasks', async (param: { title: string, todolistId: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatusAC({todolistId: param.todolistId, status: 'loading'}))\r\n    try {\r\n        const res = await todolistApi.createTask(param.todolistId, param.title)\r\n        if (res.data.resultCode === ResultCodes.success) {\r\n            const task = res.data.data.item\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            dispatch(changeTodolistEntityStatusAC({todolistId: param.todolistId, status: 'succeeded'}))\r\n            return task\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkAError(error, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\nexport const updateTaskTC = createAsyncThunk('tasks/updateTasks', async (param: { taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string }, {\r\n    dispatch,\r\n    rejectWithValue,getState\r\n}) => {\r\n    const state = getState() as AppRootStateType\r\n    const task = state.tasks[param.todolistId].find((t: any) => t.id === param.taskId)\r\n\r\n    if (!task) {\r\n        // throw new Error(\"Task not found in the redux\")\r\n        return rejectWithValue('Task not found in the state')\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        title: task.title,\r\n        description: task.description,\r\n        status: task.status,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        deadline: task.deadline,\r\n        ...param.domainModel\r\n    }\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatusAC({todolistId: param.todolistId, status: 'loading'}))\r\n    try {\r\n        const res = await todolistApi.updateTask(param.todolistId, param.taskId, apiModel)\r\n        if (res.data.resultCode === ResultCodes.success) {\r\n            // const action = updateTaskAC({id: taskId, model: domainModel, todolistId})\r\n            // dispatch(action)\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            dispatch(changeTodolistEntityStatusAC({todolistId: param.todolistId, status: 'succeeded'}))\r\n            return param\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkAError(error, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.todolistId]\r\n        });\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach(tl => {\r\n                state[tl.id] = []\r\n            });\r\n        });\r\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        });\r\n        builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        });\r\n        builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        });\r\n        builder.addCase(updateTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.domainModel}\r\n                }\r\n        });\r\n    }\r\n})\r\nexport const tasksReducer = slice.reducer\r\n\r\n// Types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import {combineReducers} from \"redux\";\r\nimport {todolistsReducer} from \"./todolists-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {logger} from \"redux-logger\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\n/*const middlewareEnhancer = applyMiddleware(thunkMiddleware)\r\nconst composeEnhancers = composeWithDevTools(middlewareEnhancer)\r\nexport const store = createStore(rootReducer, composeEnhancers)*/\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n        // .concat(logger)\r\n})\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\ntype AppDispatchType = typeof store.dispatch\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {AddBox} from \"@mui/icons-material\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\n\r\ntype addItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?:boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem,disabled=false}: addItemFormPropsType) {\r\n        const [newTaskTitle, setNewTaskTitle] = useState(\"\")\r\n        const [error, setError] = useState<boolean>(false)\r\n\r\n        const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            error && setError(false)\r\n            setNewTaskTitle((e.currentTarget.value))\r\n        }\r\n        const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n            error && setError(false)\r\n            if (e.key === \"Enter\") {\r\n                addItemHandler()\r\n            }\r\n        }\r\n        const addItemHandler = () => {\r\n            if (newTaskTitle.trim() !== \"\"\r\n                && newTaskTitle !== \"go to hell\") {\r\n                addItem(newTaskTitle)\r\n                setNewTaskTitle(\"\")\r\n            } else {\r\n                setError(true)\r\n            }\r\n        }\r\n\r\n        return <div>\r\n            <TextField value={newTaskTitle}\r\n                       disabled={disabled}\r\n                       variant={\"outlined\"}\r\n                       label={error ? \"Title is required\" : \"Enter title\"}\r\n                       onChange={onNewTitleChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={error}\r\n                       size=\"small\"/>\r\n            <IconButton onClick={addItemHandler} color={'primary'} disabled={disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    }\r\n)","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n    disabled: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function ({title, onChange, disabled}: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [newTitle, setNewTitle] = useState(\"\")\r\n\r\n    const activateEditMode = () => {\r\n        if (disabled) return\r\n        setEditMode(true)\r\n        setNewTitle(title)\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        onChange(newTitle)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            setEditMode(false)\r\n            onChange(newTitle)\r\n        }\r\n    }\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n    }\r\n    return editMode\r\n        ? <TextField value={newTitle}\r\n                     onBlur={activateViewMode}\r\n                     onKeyPress={onKeyPressHandler}\r\n                     onChange={onChangeTitleHandler}\r\n                     autoFocus\r\n                     size=\"small\"\r\n                     variant=\"standard\"/>\r\n        : <span onDoubleClick={activateEditMode}>{title}</span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {Checkbox, IconButton} from \"@mui/material\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\";\r\n\r\nexport type TaskPropsType = {\r\n    todolistId: string\r\n    task: TaskType\r\n    removeTask: (id: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newValue: string, todolistId: string) => void\r\n    disabled: boolean\r\n}\r\n\r\nexport const Task = React.memo(function ({\r\n                                             todolistId,\r\n                                             task,\r\n                                             removeTask,\r\n                                             changeTaskStatus,\r\n                                             changeTaskTitle,\r\n                                             disabled,\r\n                                             ...restProps\r\n                                         }: TaskPropsType) {\r\n\r\n    const onRemoveHandler = () => removeTask(task.id, todolistId)\r\n    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        changeTaskStatus(task.id,\r\n            e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, todolistId)\r\n    }\r\n    const onChangeTitleHandler = useCallback((newValue: string) => {\r\n        changeTaskTitle(task.id, newValue, todolistId)\r\n    }, [changeTaskTitle, task.id, todolistId])\r\n\r\n    return (\r\n        <div key={task.id} className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n            <IconButton onClick={onRemoveHandler} aria-label=\"delete\" color=\"error\" disabled={disabled}>\r\n                <Delete/>\r\n            </IconButton>\r\n            <Checkbox checked={task.status === TaskStatuses.Completed}\r\n                      onChange={onChangeStatusHandler}\r\n                      color=\"primary\" disabled={disabled}/>\r\n            <EditableSpan title={task.title} onChange={onChangeTitleHandler} disabled={disabled}/>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {Button, IconButton, List, ListItem} from \"@mui/material\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\r\nimport {FilterValuesType, TodolistDomainType} from \"../../../redux/todolists-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"../../../redux/tasks-reducer\";\r\n\r\n\r\ntype TodolistPropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string,) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newValue: string, todolistId: string) => void\r\n    changeTodolistTitle: (newTitle: string, todolistId: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: TodolistPropsType) {\r\n    const {\r\n        todolist,tasks, removeTask, removeTodolist, changeFilter, addTask, changeTaskStatus,\r\n        changeTaskTitle, changeTodolistTitle, demo = false\r\n    } = props\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) return\r\n        dispatch(fetchTasksTC(todolist.id))\r\n    }, [dispatch, todolist.id, demo])\r\n\r\n    const onAllClickHandler = useCallback(() => changeFilter(\"all\", todolist.id), [changeFilter, todolist.id])\r\n    const onActiveClickHandler = useCallback(() => changeFilter(\"active\", todolist.id), [changeFilter, todolist.id])\r\n    const onCompletedClickHandler = useCallback(() => changeFilter(\"completed\", todolist.id), [changeFilter, todolist.id])\r\n    const onRemoveTodolistHandler = useCallback(() => removeTodolist(todolist.id), [removeTodolist, todolist.id])\r\n    const onchangeTodolistTitleHandler = useCallback((newValue: string) => changeTodolistTitle(newValue, todolist.id), [changeTodolistTitle, todolist.id])\r\n    const onAddTask = useCallback((title: string) => addTask(title, todolist.id), [addTask, todolist.id])\r\n\r\n    let tasksForTodolist = tasks\r\n\r\n    if (todolist.filter === \"active\") {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (todolist.filter === \"completed\") {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><IconButton onClick={onRemoveTodolistHandler} aria-label=\"delete\" color=\"error\"\r\n        disabled={todolist.entityStatus==='loading'}>\r\n            <Delete/>\r\n        </IconButton>\r\n            <EditableSpan onChange={onchangeTodolistTitleHandler} title={todolist.title}\r\n            disabled={todolist.entityStatus==='loading'}/>\r\n        </h3>\r\n        <AddItemForm addItem={onAddTask} disabled={todolist.entityStatus==='loading'}/>\r\n        <div>\r\n            <List sx={{bgcolor: \"background.paper\"}}>\r\n                {tasksForTodolist.map(t =>\r\n                    <ListItem key={t.id}>\r\n                        <Task\r\n                            todolistId={todolist.id}\r\n                            disabled={todolist.entityStatus==='loading'}\r\n                            task={t}\r\n                            removeTask={removeTask}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            changeTaskTitle={changeTaskTitle}/>\r\n                    </ListItem>)\r\n                }</List>\r\n        </div>\r\n        <div style={{padding: \"10px\"}}>\r\n            <Button variant={todolist.filter === \"all\" ? \"contained\" : undefined} onClick={onAllClickHandler}\r\n                    color=\"inherit\" disabled={todolist.entityStatus==='loading'}>All</Button>\r\n            <Button color=\"primary\" variant={todolist.filter === \"active\" ? \"contained\" : undefined}\r\n                    onClick={onActiveClickHandler} disabled={todolist.entityStatus==='loading'}>Active\r\n            </Button>\r\n            <Button color=\"secondary\" variant={todolist.filter === \"completed\" ? \"contained\" : undefined}\r\n                    onClick={onCompletedClickHandler} disabled={todolist.entityStatus==='loading'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useAppSelector} from \"../../redux/store\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC\r\n} from \"../../redux/todolists-reducer\";\r\nimport {addTaskTC, removeTaskTC, updateTaskTC} from \"../../redux/tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/todolist-api\";\r\nimport {Grid, Paper} from \"@mui/material\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false, ...props}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const todolists = useAppSelector(state => state.todolists)\r\n    const tasks = useAppSelector(state=>state.tasks)\r\n    const isLoggedIn =useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) return\r\n        dispatch(fetchTodolistsTC())\r\n    }, [dispatch, demo, isLoggedIn])\r\n\r\n    const removeTask = useCallback((taskId: string, todolistId: string) => {\r\n        dispatch(removeTaskTC({taskId, todolistId}))\r\n    }, [dispatch])\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskTC({title, todolistId}))\r\n    }, [dispatch])\r\n    const changeStatus = useCallback((taskId: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC({taskId, domainModel: {status}, todolistId}))\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string, todolistId: string) => {\r\n        dispatch(updateTaskTC({taskId, domainModel: {title: newTitle}, todolistId}))\r\n    }, [dispatch])\r\n    const changeTodolistTitle = useCallback((newTitle: string, todolistId: string) => {\r\n        dispatch(changeTodolistTitleTC({title:newTitle, todolistId}))\r\n    }, [dispatch])\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        const action = changeTodolistFilterAC({filter:value, todolistId})\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(removeTodolistTC({todolistId:id}))\r\n    }, [dispatch])\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC({title}))\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to=\"/login\"/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: \"20px\"}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={10} justifyContent=\"center\">\r\n            {\r\n                todolists.map(tl => {\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper elevation={12} style={{padding: \"10px\"}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={tasks[tl.id]}\r\n                                removeTask={removeTask}\r\n                                removeTodolist={removeTodolist}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import * as React from 'react';\r\nimport {useState} from 'react';\r\nimport Snackbar, {SnackbarOrigin} from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch} from 'react-redux';\r\nimport {useAppSelector} from '../../redux/store';\r\nimport {setAppErrorAC} from '../../redux/app-reducer';\r\nimport s from './ErrorSnackBar.module.css'\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackBar() {\r\n    const dispatch = useDispatch()\r\n    const error = useAppSelector(state => state.app.error)\r\n\r\n    const [state,] = useState<SnackbarOrigin>({\r\n        vertical: 'bottom',\r\n        horizontal: 'center',\r\n    })\r\n    const {vertical, horizontal} = state;\r\n\r\n    const isOpen = error !== null\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n        // setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div className={s.barContainer}>\r\n            <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose} anchorOrigin={{vertical, horizontal}}>\r\n                <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n}","import {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from \"@mui/material\";\r\nimport {FormikHelpers, useFormik} from \"formik\";\r\nimport {useAppDispatch, useAppSelector} from \"../../redux/store\";\r\nimport {Navigate} from 'react-router-dom';\r\nimport {loginTC} from \"../../redux/auth-reducer\";\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: 'free@samuraijs.com',\r\n            password: 'free',\r\n            rememberMe: false,\r\n        },\r\n        onSubmit: async (values: FormValuesType, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            // @ts-ignore\r\n            const action = await dispatch(loginTC(values))\r\n            if (loginTC.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n            }\r\n        }\r\n    })\r\n    if (isLoggedIn) {\r\n        return <Navigate to=\"/\"/>\r\n    }\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}\r\n                               rel=\"noopener noreferrer nofollow\"> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\" margin=\"normal\" {...formik.getFieldProps('email')}\r\n                                   autoComplete=\"user-email\"/>\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField type=\"password\" label=\"Password\"\r\n                                   margin=\"normal\" {...formik.getFieldProps('password')}\r\n                                   autoComplete=\"current-password\"/>\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox\r\n                                              name=\"rememberMe\"/>} {...formik.getFieldProps('rememberMe')}\r\n                                          checked={formik.values.rememberMe}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n\r\n};\r\n\r\nexport default Login;","import {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport Box from '@mui/material/Box';\r\nimport {Menu} from \"@mui/icons-material\";\r\nimport themeOptions from \"../common/color-sheme\";\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport {ErrorSnackBar} from \"../components/ErrorSnackBar/ErrorSnackBar\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useAppSelector} from \"../redux/store\";\r\nimport {initializeAppTC} from \"../redux/app-reducer\";\r\nimport {BrowserRouter, Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {logoutTC} from \"../redux/auth-reducer\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport ThemeProvider from '@mui/material/styles/ThemeProvider';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Button from '@mui/material/Button';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport Container from '@mui/material/Container';\r\nimport {Login} from '../features/Login';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const dispatch = useDispatch()\r\n\r\n    const status = useAppSelector(state => state.app.status)\r\n    const isInitialized = useAppSelector(state => state.app.isInitialized)\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <CircularProgress size={40}\r\n                                 sx={{\r\n                                     color: 'primary',\r\n                                     position: 'absolute',\r\n                                     top: '50%',\r\n                                     left: '50%',\r\n                                     marginTop: '-20px',\r\n                                     marginLeft: '-20px',\r\n                                 }}/>\r\n    }\r\n \r\n    return (\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n            <ThemeProvider theme={themeOptions}>\r\n                <div className=\"App\">\r\n                    <Box sx={{flexGrow: 1}}>\r\n                        <AppBar position={\"static\"}>\r\n                            <Toolbar>\r\n                                <IconButton edge={\"start\"} color={\"inherit\"} aria-label=\"menu\" size=\"large\"\r\n                                            sx={{mr: 2}}>\r\n                                    <Menu/>\r\n                                </IconButton>\r\n                                <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                                    My Todos\r\n                                </Typography>\r\n                                {isLoggedIn && <Button color={\"inherit\"} onClick={logoutHandler}>Log out</Button>}\r\n                            </Toolbar>\r\n                            {status === 'loading' && <LinearProgress color='secondary'/>}\r\n                        </AppBar>\r\n                        <ErrorSnackBar/>\r\n                    </Box>\r\n                    <Container fixed>\r\n                        <Routes>\r\n                            <Route path=\"*\" element={<TodolistsList demo={demo}/>}/>\r\n                            <Route path=\"/login\" element={<Login/>}/>\r\n                        </Routes>\r\n                    </Container>\r\n                </div>\r\n            </ThemeProvider>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from \"./app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}><App /></Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
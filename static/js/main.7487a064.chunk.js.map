{"version":3,"sources":["reportWebVitals.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","state/todolist-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddItemForm","React","memo","props","useState","newTaskTitle","setNewTaskTitle","error","setError","TextField","value","variant","label","onChange","e","currentTarget","onKeyPress","key","trim","addItem","helperText","IconButton","onClick","color","AddBox","EditableSpan","console","log","editMode","setEditMode","title","setTitle","onBlur","autoFocus","onDoubleClick","Task","onChangeTitleHandler","useCallback","newValue","changeTaskTitle","task","id","todolistId","className","isDone","removeTask","aria-label","Delete","Checkbox","checked","changeTaskStatus","Todolist","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","onRemoveTodolistHandler","removeTodolist","onchangeTodolistTitleHandler","changeTodolistTitle","addTask","tasksForTodolist","tasks","filter","t","map","style","padding","Button","todolistId1","v1","todolistId2","todolistId3","initialState","AppWithRedux","todolists","useSelector","state","dispatch","useDispatch","action","taskId","type","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","changeTodolistTitleAC","todolistFilter","changeTodolistFilterAC","addTodolist","addTodolistAC","AppBar","position","Toolbar","edge","Menu","Typography","Container","fixed","Grid","container","spacing","tl","item","Paper","elevation","rootReducer","combineReducers","newState","newTask","todolistTasks","newTasksArray","todolistsTasks","taskToChangeTitle","find","newTodolist","todolistToChangeTitle","todolistToChangeFilter","composeEnhancers","composeWithDevTools","store","createStore","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7487a064.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype addItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm=React.memo(function(props: addItemFormPropsType) {\r\n    const [newTaskTitle, setNewTaskTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if(error!==null){\r\n            setError(null)\r\n        }\r\n        setNewTaskTitle((e.currentTarget.value))\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error!==null){\r\n            setError(null)\r\n        }\r\n        if (e.key === \"Enter\") {\r\n            if (newTaskTitle.trim() !== \"\"\r\n                && newTaskTitle !== \"hell\") {\r\n                props.addItem(newTaskTitle)\r\n                setNewTaskTitle(\"\")\r\n            }\r\n        }\r\n        else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n    const addTask = () => {\r\n        if (newTaskTitle.trim() !== \"\"\r\n            && newTaskTitle !== \"hell\") {\r\n            props.addItem(newTaskTitle)\r\n            setNewTaskTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n    return <div>\r\n        <TextField value={newTaskTitle}\r\n                   variant={\"outlined\"}\r\n                   label={\"Type value\"}\r\n                   onChange={onNewTitleChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n            // className={error ? \"error\" : \"\"}\r\n                   error={!!error}\r\n                   helperText={error}\r\n        />\r\n        <IconButton onClick={addTask}  color={'primary'}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n}\r\n)","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange:(newValue:string)=>void\r\n}\r\n\r\nexport const EditableSpan=React.memo(function(props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\")\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            setEditMode(false)\r\n            props.onChange(title)\r\n        }\r\n    }\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    return editMode\r\n        ? <TextField value={title}\r\n                 onBlur={activateViewMode}\r\n                 onKeyPress={onKeyPressHandler}\r\n                 onChange={onChangeTitleHandler} autoFocus/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {TaskType} from \"./Todolist\";\r\n\r\nexport type TaskPropsType = {\r\n    todolistId:string\r\n    task:TaskType\r\n    removeTask: (id: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newValue: string, todolistId: string) => void\r\n}\r\n\r\nexport const Task = React.memo(function (props: TaskPropsType) {\r\n\r\n    const onRemoveHandler = () => props.removeTask(props.task.id, props.todolistId)\r\n\r\n    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.task.id, e.currentTarget.checked, props.todolistId)\r\n    }\r\n\r\n    const onChangeTitleHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    },[props.changeTaskTitle,props.task.id, props.todolistId])\r\n\r\n\r\n    return (\r\n        <div key={props.task.id} className={props.task.isDone?\"is-done\":\"\"}>\r\n            <IconButton onClick={onRemoveHandler} aria-label=\"delete\">\r\n                <Delete/>\r\n            </IconButton>\r\n            <Checkbox checked={props.task.isDone}\r\n                      onChange={onChangeStatusHandler}/>\r\n            <EditableSpan title={props.task.title} onChange={onChangeTitleHandler}/>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {useCallback} from \"react\";\r\nimport {FilterValuesType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype TodolistPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string,) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newValue: string, todolistId: string) => void\r\n    changeTodolistTitle: (newTitle: string, todolistId: string) => void\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: TodolistPropsType) {\r\n    console.log(\"todolist is rendering\")\r\n    const onAllClickHandler = useCallback(() => props.changeFilter(\"all\", props.id)\r\n        , [props.changeFilter, props.id])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(\"active\", props.id)\r\n        , [props.changeFilter, props.id])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(\"completed\", props.id)\r\n        , [props.changeFilter, props.id])\r\n    const onRemoveTodolistHandler = useCallback(() => props.removeTodolist(props.id),[props.removeTodolist,props.id])\r\n    const onchangeTodolistTitleHandler = useCallback((newValue: string) => props.changeTodolistTitle(newValue, props.id)\r\n        , [props.changeTodolistTitle, props.id])\r\n    const addTask = useCallback((title: string) => props.addTask(title, props.id)\r\n        , [props.addTask, props.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => !t.isDone)\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan onChange={onchangeTodolistTitleHandler} title={props.title}/>\r\n            <IconButton onClick={onRemoveTodolistHandler} aria-label=\"delete\">\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task\r\n                    todolistId={props.id}\r\n                    key={t.id}\r\n                    task={t}\r\n                    removeTask={props.removeTask}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                    changeTaskTitle={props.changeTaskTitle}/>)\r\n            }\r\n        </div>\r\n        <div style={{padding: \"10px\"}}>\r\n            <Button variant={props.filter === \"all\" ? \"contained\" : \"text\"} onClick={onAllClickHandler}>All</Button>\r\n            <Button color={\"primary\"} variant={props.filter === \"active\" ? \"contained\" : \"text\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button color={\"secondary\"} variant={props.filter === \"completed\" ? \"contained\" : \"text\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n","import {FilterValuesType, TodolistType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport const todolistId1 = v1()\r\nexport const todolistId2 = v1()\r\nexport const todolistId3 = v1()\r\n\r\nconst initialState:Array<TodolistType>=[\r\n    {id: todolistId1, title: \"What to learn\", filter: \"active\"},\r\n    {id: todolistId2, title: \"What to buy\", filter: \"completed\"},\r\n    {id: todolistId3, title: \"What to watch\", filter: \"all\"}\r\n]\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type:'REMOVE-TODOLIST'\r\n    id:string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todolistId:string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\nexport type ActionsType =\r\n    RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n\r\nexport const todolistReducer = (state: Array<TodolistType>=initialState, action: ActionsType):Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            let newTodolist: TodolistType = {\r\n                id: action.todolistId,\r\n                filter: \"all\",\r\n                title: action.title\r\n            }\r\n            return [...state, newTodolist]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            let todolistToChangeTitle = state.find(tl => tl.id === action.id)\r\n            if (todolistToChangeTitle) {\r\n                todolistToChangeTitle.title = action.title\r\n            }\r\n            return [...state]\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            let todolistToChangeFilter = state.find(tl => tl.id === action.id)\r\n            if (todolistToChangeFilter) {\r\n                todolistToChangeFilter.filter = action.filter\r\n            }\r\n            return [...state]\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => ({\r\n        type: 'REMOVE-TODOLIST',\r\n        id: todolistId\r\n    }as const)\r\nexport const addTodolistAC = (title:string): AddTodolistActionType => ({\r\n    type: 'ADD-TODOLIST',\r\n    title: title,\r\n    todolistId:v1()\r\n})\r\n\r\nexport const changeTodolistTitleAC = (newTitle:string,todolistId: string ): ChangeTodolistTitleActionType => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: todolistId,\r\n    title: newTitle\r\n})\r\n\r\nexport const changeTodolistFilterAC = (todolistFilter:FilterValuesType,todolistId: string ): ChangeTodolistFilterActionType => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: todolistId,\r\n    filter: todolistFilter\r\n})\r\n\r\n\r\n\r\n","import {TasksStateType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {\r\n    AddTodolistActionType,\r\n    RemoveTodolistActionType,\r\n    todolistId1,\r\n    todolistId2,\r\n    todolistId3\r\n} from \"./todolist-reducer\";\r\n\r\nconst initialState: TasksStateType = {\r\n    [todolistId1]: [\r\n        {id: v1(), title: \"CSS\", isDone: true},\r\n        {id: v1(), title: \"JS\", isDone: true},\r\n        {id: v1(), title: \"React\", isDone: false}\r\n    ],\r\n    [todolistId2]: [\r\n        {id: v1(), title: \"Broccoli\", isDone: true},\r\n        {id: v1(), title: \"Juice\", isDone: false},\r\n        {id: v1(), title: \"Bread\", isDone: false},\r\n        {id: v1(), title: \"Milk\", isDone: true},\r\n        {id: v1(), title: \"Mayonnaise\", isDone: false}\r\n    ],\r\n    [todolistId3]: [\r\n        {id: v1(), title: \"Terminator\", isDone: true},\r\n        {id: v1(), title: \"Gentlemen of fortune\", isDone: false},\r\n        {id: v1(), title: \"Avatar\", isDone: false},\r\n    ]\r\n}\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    id: string\r\n    todolistId: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    id: string\r\n    todolistId: string\r\n    title: string\r\n}\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    id: string\r\n    todolistId: string\r\n    isDone: boolean\r\n}\r\n\r\ntype ActionsType =\r\n    RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nexport const taskReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            let newState = state[action.todolistId].filter(t => t.id !== action.id)\r\n            debugger\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: newState\r\n            }\r\n\r\n        case 'ADD-TASK':\r\n            let newTask = {id: v1(), title: action.title, isDone: false}\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: [newTask, ...state[action.todolistId]]\r\n            }\r\n        case 'CHANGE-TASK-STATUS':\r\n            let todolistTasks = state[action.todolistId]\r\n            let newTasksArray= todolistTasks.map(t => t.id === action.id?{...t,isDone:action.isDone}:t)\r\n\r\n            state[action.todolistId] = newTasksArray\r\n            return ({...state})\r\n\r\n        case 'CHANGE-TASK-TITLE':\r\n            let todolistsTasks = state[action.todolistId]\r\n            let  taskToChangeTitle = todolistsTasks.find(t => t.id === action.id)\r\n            if (taskToChangeTitle) {\r\n                taskToChangeTitle.title = action.title\r\n            }\r\n            state[action.todolistId] = [...todolistsTasks]\r\n            return {...state}\r\n        case 'ADD-TODOLIST':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        case 'REMOVE-TODOLIST':\r\n            delete (state[action.id])\r\n            return {...state}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => ({\r\n    type: 'REMOVE-TASK',\r\n    id: taskId,\r\n    todolistId: todolistId\r\n})\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => ({\r\n    type: 'ADD-TASK',\r\n    title: title,\r\n    todolistId: todolistId\r\n})\r\n\r\nexport const changeTaskStatusAC = (id: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => ({\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId: todolistId,\r\n    id: id,\r\n    isDone: isDone\r\n})\r\n\r\nexport const changeTaskTitleAC = (id: string, newTitle: string, todolistId: string): ChangeTaskTitleActionType => ({\r\n    type: 'CHANGE-TASK-TITLE',\r\n    id: id,\r\n    title: newTitle,\r\n    todolistId: todolistId\r\n})\r\n\r\n\r\n\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from \"./Todolist\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {addTodolistAC, changeTodolistFilterAC, changeTodolistTitleAC, removeTodolistAC} from \"./state/todolist-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask=useCallback((id: string, todolistId: string)=> {\r\n        const action = removeTaskAC(id, todolistId)\r\n        dispatch(action)\r\n    },[dispatch])\r\n\r\n    const addTask=useCallback((title: string, todolistId: string) =>{\r\n        const action = addTaskAC(title, todolistId)\r\n        dispatch(action)\r\n    },[dispatch])\r\n\r\n    const changeStatus=useCallback((taskId: string, isDone: boolean, todolistId: string)=> {\r\n        const action = changeTaskStatusAC(taskId, isDone, todolistId)\r\n        dispatch(action)\r\n    },[dispatch])\r\n\r\n    const changeTaskTitle=useCallback((taskId: string, newTitle: string, todolistId: string)=> {\r\n        const action = changeTaskTitleAC(taskId, newTitle, todolistId)\r\n        dispatch(action)\r\n    },[dispatch])\r\n\r\n    const changeTodolistTitle=useCallback((newTitle: string, todolistId: string)=> {\r\n        const action = changeTodolistTitleAC(newTitle, todolistId)\r\n        dispatch(action)\r\n    },[dispatch])\r\n\r\n    const changeFilter=useCallback((value: FilterValuesType, todolistId: string) =>{\r\n        const action = changeTodolistFilterAC(value, todolistId)\r\n        dispatch(action)\r\n    },[dispatch])\r\n\r\n    const removeTodolist=useCallback((id: string)=> {\r\n        const action = removeTodolistAC(id)\r\n        dispatch(action)\r\n    },[dispatch])\r\n\r\n    const  addTodolist=useCallback((title: string) =>{\r\n        const action = addTodolistAC(title)\r\n        dispatch(action)\r\n    },[dispatch])\r\n\r\n/*    console.log(todolists)\r\n    console.log(tasks)*/\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={\"static\"}>\r\n                <Toolbar>\r\n                    <IconButton edge={\"start\"} color={\"inherit\"} aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color={\"inherit\"}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={10}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let tasksForTodolist = tasks[tl.id]\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper elevation={12} style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                        filter={tl.filter}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {taskReducer} from \"./tasks-reducer\";\r\nimport {todolistReducer} from \"./todolist-reducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todolists: todolistReducer\r\n})\r\n\r\nconst composeEnhancers = composeWithDevTools\r\n\r\nexport const store=createStore(rootReducer,composeEnhancers())\r\n\r\nexport type AppRootStateType=ReturnType<typeof rootReducer>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store=store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}><AppWithRedux /></Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
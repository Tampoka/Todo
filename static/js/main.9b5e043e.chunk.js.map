{"version":3,"sources":["api/todolist-api.ts","reportWebVitals.ts","AddItemForm.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","EditableSpan.tsx","Task.tsx","Todolist.tsx","common/color-sheme.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddItemForm","React","memo","props","useState","newTaskTitle","setNewTaskTitle","error","setError","addTask","trim","addItem","TextField","value","variant","label","onChange","e","currentTarget","onKeyPress","key","size","IconButton","onClick","color","AddBox","instance","axios","create","baseURL","withCredentials","headers","todolistApi","get","title","post","todolistId","delete","taskId","initialState","EditableSpan","editMode","setEditMode","setTitle","onBlur","autoFocus","onDoubleClick","Task","task","removeTask","changeTaskStatus","changeTaskTitle","onChangeTitleHandler","useCallback","newValue","id","className","status","Completed","aria-label","Delete","Checkbox","checked","New","Todolist","tasks","removeTodolist","changeFilter","changeTodolistTitle","filter","dispatch","useDispatch","useEffect","res","type","setTasksAC","data","items","console","log","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","onRemoveTodolistHandler","onchangeTodolistTitleHandler","onAddTask","tasksForTodolist","t","List","sx","bgcolor","map","ListItem","style","padding","Button","undefined","themeOptions","createTheme","palette","primary","main","secondary","light","background","default","paper","AppWithRedux","todolists","useSelector","state","removeTaskAC","removeTaskTC","action","item","addTaskTC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","changeTodolistTitleAC","todolistFilter","changeTodolistFilterAC","removeTodolistAC","addTodolist","todolist","addTodolistTC","ThemeProvider","theme","Box","flexGrow","AppBar","position","Toolbar","edge","mr","Menu","Typography","component","Container","fixed","Grid","container","spacing","justifyContent","tl","Paper","elevation","rootReducer","combineReducers","newState","todoListId","todolistTasks","newTasksArray","todolistsTasks","taskToChangeTitle","find","copyState","forEach","newTodolist","todolistToChangeTitle","todolistToChangeFilter","middlewareEnhancer","applyMiddleware","thunkMiddleware","composeEnhancers","composeWithDevTools","store","createStore","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9b5e043e.chunk.js","sourcesContent":["import axios, {AxiosResponse} from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '73fdf213-e363-4a31-ad92-85b5d437ac0f'\r\n    },\r\n})\r\n\r\nexport const todolistApi = {\r\n    getTodos() {\r\n        return instance.get<Array<TodoListType>>('todo-lists')\r\n    },\r\n    // createTodo(title: string) {\r\n    //     return instance.post<CommonResponseType<{ item: TodoListType }>, AxiosResponse<CommonResponseType<{ item: TodoListType }>>, { title: string }>\r\n    //     ('todo-lists', {title})\r\n    // },\r\n    createTodo(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<CommonResponseType<{ item: TodoListType }>>>\r\n        ('todo-lists', {title})\r\n    },\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<CommonResponseType, AxiosResponse<CommonResponseType>, { title: string }>(`todo-lists/${todolistId}`, {title: title})\r\n    },\r\n\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<CommonResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<CommonResponseType<{ item: TaskType }>>>\r\n        (`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<CommonResponseType<{ item: TaskType }>>>\r\n        (`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<CommonResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    }\r\n}\r\n\r\n//types\r\nexport type TodoListType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\ntype CommonResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsError: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype GetTasksResponseType = {\r\n    error: null | string\r\n    items: TaskType[]\r\n    totalCount: number\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {AddBox} from \"@mui/icons-material\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\n\r\ntype addItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: addItemFormPropsType) {\r\n        const [newTaskTitle, setNewTaskTitle] = useState(\"\")\r\n        const [error, setError] = useState<boolean>(false)\r\n\r\n        const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            error && setError(false)\r\n            setNewTaskTitle((e.currentTarget.value))\r\n        }\r\n        const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n            error && setError(false)\r\n            if (e.key === \"Enter\") {\r\n                addTask()\r\n            }\r\n        }\r\n        const addTask = () => {\r\n            if (newTaskTitle.trim() !== \"\"\r\n                && newTaskTitle !== \"go to hell\") {\r\n                props.addItem(newTaskTitle)\r\n                setNewTaskTitle(\"\")\r\n            } else {\r\n                setError(true)\r\n            }\r\n        }\r\n\r\n        return <div>\r\n            <TextField value={newTaskTitle}\r\n                       variant={\"outlined\"}\r\n                       label={error ? \"Title is required\" : \"Enter title\"}\r\n                       onChange={onNewTitleChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={error}\r\n                       size=\"small\"/>\r\n            <IconButton onClick={addTask} color={'primary'}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    }\r\n)","import {todolistApi, TodoListType} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistDomainType = TodoListType & { filter: FilterValuesType }\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            const newTodolist: TodolistDomainType = {...action.todolist, filter: 'all'}\r\n            return [newTodolist, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            let todolistToChangeTitle = state.find(tl => tl.id === action.id)\r\n            if (todolistToChangeTitle) {\r\n                todolistToChangeTitle.title = action.title\r\n            }\r\n            return [...state]\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            let todolistToChangeFilter = state.find(tl => tl.id === action.id)\r\n            if (todolistToChangeFilter) {\r\n                todolistToChangeFilter.filter = action.filter\r\n            }\r\n            return [...state]\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//Action Creators\r\nexport const removeTodolistAC = (todolistId: string) => ({\r\n    type: 'REMOVE-TODOLIST',\r\n    id: todolistId\r\n} as const)\r\nexport const addTodolistAC = (todolist: TodoListType) => ({\r\n    type: 'ADD-TODOLIST',\r\n    todolist\r\n} as const)\r\nexport const changeTodolistTitleAC = (newTitle: string, todolistId: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: todolistId,\r\n    title: newTitle\r\n} as const)\r\nexport const changeTodolistFilterAC = (todolistFilter: FilterValuesType, todolistId: string) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: todolistId,\r\n    filter: todolistFilter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodoListType>): SetTodolistsActionType => ({\r\n    type: 'SET-TODOLISTS',\r\n    todolists\r\n})\r\n\r\n//Thunks\r\n/*export const fetchTodolistsThunk = (dispatch: Dispatch) => {\r\n    todolistApi.getTodos()\r\n        .then(res => {\r\n            dispatch(setTodolistsAC(res.data))\r\n        })\r\n}*/\r\n\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistApi.getTodos()\r\n            .then(res => {\r\n                dispatch(setTodolistsAC(res.data))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) =>\r\n    (dispatch: Dispatch) => {\r\n        todolistApi.deleteTodo(todolistId)\r\n            .then(res => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n            })\r\n    }\r\n\r\nexport const addTodolistTC = (title: string) =>\r\n    (dispatch: Dispatch) => {\r\n        todolistApi.createTodo(title)\r\n            .then(res => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n            })\r\n    }\r\n\r\n\r\n//Action types\r\nexport type SetTodolistsActionType = {\r\n    type: 'SET-TODOLISTS',\r\n    todolists: Array<TodoListType>\r\n}\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n\r\n\r\n\r\n\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType,} from \"./todolists-reducer\";\r\nimport {TaskStatuses, TaskType, todolistApi} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type TasksStateType = { [key: string]: Array<TaskType> }\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const taskReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            let newState = state[action.todolistId].filter(t => t.id !== action.id)\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: newState\r\n            }\r\n        case 'ADD-TASK':\r\n            return {\r\n                ...state,\r\n              [action.task.todoListId]: [action.task,...state[action.task.todoListId]]\r\n            }\r\n        case 'CHANGE-TASK-STATUS':\r\n            let todolistTasks = state[action.todolistId]\r\n            let newTasksArray = todolistTasks.map(t => t.id === action.id ? {...t, status: action.status} : t)\r\n\r\n            state[action.todolistId] = newTasksArray\r\n            return ({...state})\r\n        case 'CHANGE-TASK-TITLE':\r\n            let todolistsTasks = state[action.todolistId]\r\n            let taskToChangeTitle = todolistsTasks.find(t => t.id === action.id)\r\n            if (taskToChangeTitle) {\r\n                taskToChangeTitle.title = action.title\r\n            }\r\n            state[action.todolistId] = [...todolistsTasks]\r\n            return {...state}\r\n        case 'ADD-TODOLIST':\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n        case 'REMOVE-TODOLIST':\r\n            delete (state[action.id])\r\n            return {...state}\r\n        case 'SET-TODOLISTS':\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        case \"SET-TASKS\":\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: action.tasks\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Action Creators\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({\r\n    type: 'REMOVE-TASK',\r\n    id: taskId,\r\n    todolistId: todolistId\r\n} as const)\r\nexport const addTaskAC = (task:TaskType) => ({\r\n    type: 'ADD-TASK',\r\n   task\r\n} as const)\r\nexport const changeTaskStatusAC = (id: string, status: TaskStatuses, todolistId: string) => ({\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId,\r\n    id,\r\n    status\r\n} as const)\r\nexport const changeTaskTitleAC = (id: string, newTitle: string, todolistId: string) => ({\r\n    type: 'CHANGE-TASK-TITLE',\r\n    id: id,\r\n    title: newTitle,\r\n    todolistId: todolistId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\n\r\n//Thunks\r\nexport const fetchTasksTC = (todolistId: string) =>\r\n    (dispatch: Dispatch) =>\r\n        todolistApi.getTasks(todolistId)\r\n            .then(res => {\r\n                dispatch(setTasksAC(res.data.items, todolistId))\r\n            })\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) =>\r\n    (dispatch: Dispatch) =>\r\n        todolistApi.deleteTask(todolistId, taskId)\r\n            .then(res => {\r\n                dispatch(removeTaskAC(taskId, todolistId))\r\n            })\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) =>\r\n    (dispatch: Dispatch) =>\r\n        todolistApi.createTask(todolistId, title)\r\n            .then(res => {\r\n                const action = addTaskAC(res.data.data.item)\r\n                dispatch(action)\r\n            })\r\n//Action Types\r\ntype ActionsType =\r\n    ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changeTaskStatusAC>\r\n    | ReturnType<typeof changeTaskTitleAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | SetTasksActionType\r\n\r\nexport type SetTasksActionType = {\r\n    type: 'SET-TASKS',\r\n    tasks: Array<TaskType>,\r\n    todolistId: string\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            setEditMode(false)\r\n            props.onChange(title)\r\n        }\r\n    }\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    return editMode\r\n        ? <TextField value={title}\r\n                     onBlur={activateViewMode}\r\n                     onKeyPress={onKeyPressHandler}\r\n                     onChange={onChangeTitleHandler}\r\n                     autoFocus\r\n                     size=\"small\"\r\n                     variant=\"standard\"/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {Checkbox, IconButton} from \"@mui/material\";\r\nimport {TaskStatuses, TaskType} from \"./api/todolist-api\";\r\n\r\nexport type TaskPropsType = {\r\n    todolistId:string\r\n    task:TaskType\r\n    removeTask: (id: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newValue: string, todolistId: string) => void\r\n}\r\n\r\nexport const Task = React.memo(function ({todolistId,task,removeTask,changeTaskStatus,changeTaskTitle}: TaskPropsType) {\r\n\r\n    const onRemoveHandler = () => removeTask(task.id, todolistId)\r\n    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n       changeTaskStatus(task.id,\r\n            e.currentTarget.checked?TaskStatuses.Completed:TaskStatuses.New, todolistId)\r\n    }\r\n    const onChangeTitleHandler = useCallback((newValue: string) => {\r\n        changeTaskTitle(task.id, newValue, todolistId)\r\n    },[changeTaskTitle,task.id, todolistId])\r\n\r\n    return (\r\n        <div key={task.id} className={task.status===TaskStatuses.Completed?\"is-done\":\"\"}>\r\n            <IconButton onClick={onRemoveHandler} aria-label=\"delete\" color=\"error\">\r\n                <Delete/>\r\n            </IconButton>\r\n            <Checkbox checked={task.status===TaskStatuses.Completed}\r\n                      onChange={onChangeStatusHandler}\r\n            color=\"primary\"/>\r\n            <EditableSpan title={task.title} onChange={onChangeTitleHandler}/>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Task} from \"./Task\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {Button, IconButton, List, ListItem} from \"@mui/material\";\r\nimport {TaskStatuses, TaskType} from \"./api/todolist-api\";\r\nimport {FilterValuesType} from \"./state/todolists-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"./state/tasks-reducer\";\r\n\r\n\r\ntype TodolistPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string,) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newValue: string, todolistId: string) => void\r\n    changeTodolistTitle: (newTitle: string, todolistId: string) => void\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: TodolistPropsType) {\r\n    const {\r\n        id, title, tasks, removeTask, removeTodolist, changeFilter, addTask, changeTaskStatus,\r\n        changeTaskTitle, changeTodolistTitle, filter\r\n    } = props\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(id))\r\n    }, [dispatch,id])\r\n\r\n    console.log(\"todolist is rendering\")\r\n    const onAllClickHandler = useCallback(() => changeFilter(\"all\", id), [changeFilter, id])\r\n    const onActiveClickHandler = useCallback(() => changeFilter(\"active\", id), [changeFilter, id])\r\n    const onCompletedClickHandler = useCallback(() => changeFilter(\"completed\", id), [changeFilter, id])\r\n    const onRemoveTodolistHandler = useCallback(() => removeTodolist(id), [removeTodolist, id])\r\n    const onchangeTodolistTitleHandler = useCallback((newValue: string) => changeTodolistTitle(newValue, id), [changeTodolistTitle, id])\r\n    const onAddTask = useCallback((title: string) => addTask(title, id), [addTask, id])\r\n\r\n    let tasksForTodolist = tasks\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (filter === \"completed\") {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><IconButton onClick={onRemoveTodolistHandler} aria-label=\"delete\" color=\"error\">\r\n            <Delete/>\r\n        </IconButton>\r\n            <EditableSpan onChange={onchangeTodolistTitleHandler} title={title}/>\r\n        </h3>\r\n        <AddItemForm addItem={onAddTask}/>\r\n        <div>\r\n            <List sx={{bgcolor: \"background.paper\"}}>\r\n                {tasksForTodolist.map(t =>\r\n                    <ListItem key={t.id}>\r\n                        <Task\r\n                            todolistId={id}\r\n                            task={t}\r\n                            removeTask={removeTask}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            changeTaskTitle={changeTaskTitle}/>\r\n                    </ListItem>)\r\n                }</List>\r\n        </div>\r\n        <div style={{padding: \"10px\"}}>\r\n            <Button variant={filter === \"all\" ? \"contained\" : undefined} onClick={onAllClickHandler}\r\n                    color=\"inherit\">All</Button>\r\n            <Button color=\"primary\" variant={filter === \"active\" ? \"contained\" : undefined}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button color=\"secondary\" variant={filter === \"completed\" ? \"contained\" : undefined}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n","import {createTheme} from \"@mui/material\";\r\n\r\nconst themeOptions = createTheme({\r\n    palette: {\r\n        // type: 'light',\r\n        primary: {\r\n            main: '#1c7888',\r\n        },\r\n        secondary: {\r\n            main: '#894ee3',\r\n            light: 'rgba(255,167,51,0.38)',\r\n        },\r\n        background: {\r\n            default: '#e0e0e0',\r\n            paper: 'rgba(250,250,250,0.77)',\r\n        },\r\n        error: {\r\n            main: '#e34337',\r\n        },\r\n    },\r\n})\r\n\r\nexport default themeOptions","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskTC, changeTaskStatusAC, changeTaskTitleAC, removeTaskTC, TasksStateType} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {Todolist} from \"./Todolist\";\r\nimport Box from '@mui/material/Box';\r\nimport {Menu} from \"@mui/icons-material\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, ThemeProvider, Toolbar, Typography} from \"@mui/material\";\r\nimport themeOptions from \"./common/color-sheme\";\r\nimport {TaskStatuses} from \"./api/todolist-api\";\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n       dispatch(removeTaskTC(id,todolistId))\r\n    }, [dispatch])\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n       dispatch(addTaskTC(title,todolistId))\r\n    }, [dispatch])\r\n    const changeStatus = useCallback((taskId: string, status: TaskStatuses, todolistId: string) => {\r\n        const action = changeTaskStatusAC(taskId, status, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string, todolistId: string) => {\r\n        const action = changeTaskTitleAC(taskId, newTitle, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeTodolistTitle = useCallback((newTitle: string, todolistId: string) => {\r\n        const action = changeTodolistTitleAC(newTitle, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        const action = changeTodolistFilterAC(value, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const removeTodolist = useCallback((id: string) => {\r\n       dispatch(removeTodolistTC(id))\r\n    }, [dispatch])\r\n    const addTodolist = useCallback((title: string) => {\r\n       dispatch(addTodolistTC(title))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <ThemeProvider theme={themeOptions}>\r\n            <div className=\"App\">\r\n                <Box sx={{flexGrow: 1}}>\r\n                    {/* eslint-disable-next-line react/jsx-no-undef */}\r\n                    <AppBar position={\"static\"}>\r\n                        <Toolbar>\r\n                            <IconButton edge={\"start\"} color={\"inherit\"} aria-label=\"menu\" size=\"large\" sx={{mr: 2}}>\r\n                                <Menu/>\r\n                            </IconButton>\r\n                            <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                                News\r\n                            </Typography>\r\n                            <Button color={\"inherit\"}>Login</Button>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                </Box>\r\n                <Container fixed>\r\n                    <Grid container style={{padding: \"20px\"}}>\r\n                        <AddItemForm addItem={addTodolist}/>\r\n                    </Grid>\r\n                    <Grid container spacing={10} justifyContent=\"center\">{\r\n                        todolists.map(tl => {\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper elevation={12} style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasks[tl.id]}\r\n                                        removeTask={removeTask}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                        filter={tl.filter}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                    </Grid>\r\n                </Container>\r\n            </div>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {taskReducer} from \"./tasks-reducer\";\r\nimport {todolistsReducer} from \"./todolists-reducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todolists: todolistsReducer\r\n})\r\n\r\nconst middlewareEnhancer = applyMiddleware(thunkMiddleware)\r\nconst composeEnhancers = composeWithDevTools(middlewareEnhancer)\r\n\r\nexport const store = createStore(rootReducer, composeEnhancers)\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}><AppWithRedux /></Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}